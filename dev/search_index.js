var documenterSearchIndex = {"docs":
[{"location":"man/tools/#Julia-tools","page":"Tools","title":"Julia tools","text":"","category":"section"},{"location":"man/tools/","page":"Tools","title":"Tools","text":"primitivetype(T::Type)\nlc_primitivetype(o::Any)\nlc_eltype(o)\nconditionalType(n::T, nc::Int; msg=true) where {T<:Integer}\nfind_all(A::Union{String,AbstractArray{T,1}}, a::T...; count=false)  where T\nfind_first(A::Union{String,AbstractArray{T,1}}, a::T...; dict=false)  where T\nfind_last(A::Union{String,AbstractArray{T,1}}, a::T...; dict=false)  where T","category":"page"},{"location":"man/tools/#CamiXon.primitivetype-Tuple{Type}","page":"Tools","title":"CamiXon.primitivetype","text":"primitivetype(T::Type)\n\nThe primitive type of a Type\n\nExamples:\n\njulia> T = Complex{Float16}};\njulia> primitivetype(T)\nFloat16\n\njulia> T = String\njulia> primitivetype(T)\nChar\n\n\n\n\n\n","category":"method"},{"location":"man/tools/#CamiXon.lc_primitivetype-Tuple{Any}","page":"Tools","title":"CamiXon.lc_primitivetype","text":"lc_primitivetype(o::Any)\n\nLowest comon primitive type of Any Type\n\nExamples:\n\njulia> o = ([1//2, 1//3]; (1//4, 1//1, 1//6));\njulia> lc_primitivetype(o)\nInt64\n\n\n\n\n\n","category":"method"},{"location":"man/tools/#CamiXon.lc_eltype-Tuple{Any}","page":"Tools","title":"CamiXon.lc_eltype","text":"lc_eltype(o) ≡ eltype\n\nLowest common eltype of a collection.\n\nExamples:\n\njulia> o = ([1//2, 1//3]; (1//4, 1//1, 1//6));\njulia> lc_eltype(o)\nRational{Int64}\n\njulia> o = ([1//2, 1//3]; (1//4, big(1)//big(5), 1//6));\njulia> lc_eltype(o)\nRational\n\njulia> o = ([1//2, 1//3]; (1//4, [big(1)//big(5)], 1//6));\njulia> lc_eltype(o)\nAny\n\njulia> o = ([1/2, 1/3]; (1/4, 1/1, 1/6));\njulia> lc_eltype(o)\nFloat64\n\n\n\n\n\n","category":"method"},{"location":"man/tools/#CamiXon.conditionalType-Union{Tuple{T}, Tuple{T, Int64}} where T<:Integer","page":"Tools","title":"CamiXon.conditionalType","text":"conditionalType(n::T, nc::T [; msg=true]) where T<:Integer\n\nConvert type T to BigInt for n > nc.\n\nExample:\n\njulia> conditionalType(46, 46)\nInt64\n\njulia> conditionalType(47, 46)\nBigInt\n\n\n\n\n\n","category":"method"},{"location":"man/tools/#CamiXon.find_all-Union{Tuple{T}, Tuple{Union{AbstractVector{T}, String}, Vararg{T}}} where T","page":"Tools","title":"CamiXon.find_all","text":"find_all(A [,a...]; count=false)\n\nA: string/array of elements of the same type\n\ndefault   : Array containing the index (indices) of selected elements of A (default: all elements)\n\ncount=true: The number of indices found for selected elements of A (default: all elements)\n\nExamples:\n\nA = [:📑,:📌,:📢,:📌,:📞]\nB = [1,2,3,2,5]\nstr = \"aβcβd\";\nfind_all(A) == find_all(B) == find_all(str)\ntrue\n\nfind_all(A,:📌)\n1-element Array{Array{Int64,1},1}:\n [2, 4]\n\nfind_all(str)\n4-element Array{Array{Int64,1},1}:\n [1]\n [2, 4]\n [3]\n [5]\n\nfind_all(A; count=true)\n4-element Array{Int64,1}:\n 1\n 2\n 1\n 1\n\nstr = \"📑📌📢📌📞\"\nfind_all(str,'📌')\n1-element Array{Array{Int64,1},1}:\n [2, 4]\n\n\n\n\n\n","category":"method"},{"location":"man/tools/#CamiXon.find_first-Union{Tuple{T}, Tuple{Union{AbstractVector{T}, String}, Vararg{T}}} where T","page":"Tools","title":"CamiXon.find_first","text":"find_first(A [,a...]; dict=false)\n\nThe first index of selected Array element\n\nA: string/array of elements of the same type\n\ndefault  : Array containing the first index (indices) of selected elements of A (default: all elements)\n\ndict=true: Dict for the first index (indices) of selected elements of A (default: all elements)\n\nExamples:\n\nA = [:📑,:📌,:📢,:📌,:📞]\nB = [1,2,3,2,5]\nstr = \"aβcβd\";\n\nfind_first(A) == find_first(B) == find_first(str)\ntrue\n\nfind_first(A,:📌)\n1-element Array{Array{Int64,1},1}:\n 2\n\nfind_last(A,:📌; dict=true)\n1-element Array{Pair{Symbol,Int64},1}:\n :📌 => 2\n\nfind_last(A; dict=true)\n4-element Array{Pair{Symbol,Int64},1}:\n :📑 => 1\n :📌 => 2\n :📢 => 3\n :📞 => 5\n\nfind_first(str)\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 5\n\n\n\n\n\n","category":"method"},{"location":"man/tools/#CamiXon.find_last-Union{Tuple{T}, Tuple{Union{AbstractVector{T}, String}, Vararg{T}}} where T","page":"Tools","title":"CamiXon.find_last","text":"find_last(A [,a...]; dict=false)\n\nThe last index of selected Array element\n\nA: string/array of elements of the same type\n\ndefault  : Array containing the lasst index (indices) of selected elements of A (default: all elements)\n\ndict=true: Dict for the lasst index (indices) of selected elements of A (default: all elements)\n\nExamples:\n\nA = [:📑,:📌,:📢,:📌,:📞]\nB = [1,2,3,2,5]\nstr = \"aβcβd\";\nfind_last(A) == find_first(B) == find_first(str)\ntrue\n\nfind_last(A,:📌)\n1-element Array{Array{Int64,1},1}:\n 4\n\nfind_last(A,:📌; dict=true)\n1-element Array{Pair{Symbol,Int64},1}:\n :📌 => 4\n\nfind_last(A; dict=true)\n4-element Array{Pair{Symbol,Int64},1}:\n :📑 => 1\n :📌 => 4\n :📢 => 3\n :📞 => 5\n\nfind_last(str)\n4-element Array{Int64,1}:\n 1\n 4\n 3\n 5\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#Numerical-integration","page":"Numerical integration","title":"Numerical integration","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"The Adams-Moulton method is used for numerical integration of the reduces radial wave equation. In the present implementation it is constructed on top the objects Atom, Orbit, CamiDiff.Grid, Def and Adams using 5 globally defined instances called atom, orbit, grid, def and adams.","category":"page"},{"location":"man/adams-moulton/adams-moulton/#Adams","page":"Numerical integration","title":"Adams","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"The Adams object serves to hold the Adams-Moulton integration matrices matG, matσ, matMinv as well as the actual normalized solution Z in the form of a tabulated function of N elements.","category":"page"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"Adams\ncastAdams(E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\nupdateAdams!(adams::Adams{T}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real","category":"page"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.Adams","page":"Numerical integration","title":"CamiXon.Adams","text":"Adams{T}\n\nG: (:Vector{Matrix{T}})\nσ: (:Vector{Matrix{T}})\nMinv: (:Vector{Matrix{T}})\n\n\n\n\n\n","category":"type"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.castAdams-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.castAdams","text":"castAdams(E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\n\nInitiates the Adams object.\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.updateAdams!-Union{Tuple{T}, Tuple{Adams{T}, T, Grid{T}, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.updateAdams!","text":"updateAdams!(adams::Adams{T}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\n\nUpdate Adams object.\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#Adams-related-functions","page":"Numerical integration","title":"Adams related functions","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"matG(E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\nmatσ(E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\nmatMinv(E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real","category":"page"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.matG-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.matG","text":"matG(E::T, pot::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\n\ncoupling matrix - Johnson (2.54)\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.matσ-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.matσ","text":"matσ(E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\n\ncoupling matrix - Johnson (2.54)\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.matMinv-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.matMinv","text":"matMinv(E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\n\nAdams-Moulton correction matrix - Johnson (2.56)\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#Adams-Moulton-integration","page":"Numerical integration","title":"Adams-Moulton integration","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"adams_moulton_solve!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\nadams_moulton_solve_refine!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real","category":"page"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.adams_moulton_solve!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, T, Grid{T}, Def{T}, Adams{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.adams_moulton_solve!","text":"adams_moulton_solve!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams1{T}) where T<:Real\n\nNumerical solution of the 1D Schrödinger equation for the radial motion of a valence electron of energy E. Output: the improved Adams object, the energy convergence ΔE, and Z, where P = real(Z) is the reduced radial wavefunction and Q = imag(Z) its derivative.\n\nExample:\n\natom = castAtom(Z=1, A=1, Q=0, msg=true)\norbit = castOrbit(n=1, ℓ=0)\ngrid = autoGrid(atom, orbit, Float64; Nboost=1, msg=true)\ndef = castDef(grid, atom, orbit, codata)\nE = Ecal = convert(grid.T, bohrformula(atom.Z, orbit.n))\nadams = castAdams(E, grid, def);\n\nadams, ΔE, Z = adams_moulton_solve(E, grid, def, adams)\nplot_wavefunction(Z, 1:grid.N, grid, def; reduced=true)\n\nThe plot is made using CairomMakie. NB.: plot_wavefunction is not part of the CamiXon package. (Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.adams_moulton_solve_refine!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, T, Grid{T}, Def{T}, Adams{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.adams_moulton_solve_refine!","text":"adams_moulton_solve_refine!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#Radial-integration-outward","page":"Numerical integration","title":"Radial integration - outward","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"OUTSCH!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\nOUTSCH_WJ!(Z::Vector{Complex{T}}, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\nOUTSCH_WKB!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\nadams_moulton_outward!(Z::Vector{Complex{T}}, def::Def{T}, adams::Adams{T}) where T<:Real","category":"page"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.OUTSCH!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, T, Grid{T}, Def{T}, Adams{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.OUTSCH!","text":"OUTSCH!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\n\nAnsatz solution for the outward integration of the radial wave equation for the first k points  on the CamiDiff.Grid, where k is the Adams-Moulton order. For angular momentum 0 ≤ ℓ ≤ 5 the  Walter Johnson Ansatz is used; for ℓ  5 the Ansatz is based on the WKB solution for energy E  at distances far below the inner classical turning point - ictp)\n\nExample:\n\nEcal, grid, def, adams = demo_hydrogen(n=1, ℓ=0)\nZ = OUTSCH(Ecal, grid, def, adams.σ)\nprintln(\"\\nZ: standard Ansatz for wavefunction (n < Na=$(def.pos.Na)))\")\n    Orbital: 1s\n        principal quantum number: n = 1\n        radial quantum number: n′ = 0 (number of nodes in radial wavefunction)\n        orbital angular momentum of valence electron: ℓ = 0\n    CamiDiff.Grid created: exponential, Float64, Rmax = 63.0 a.u., N = 100, h = 0.1, r0 = 0.00286033\n    Def created for hydrogen 1s on exponential grid\n\n    Z: standard Ansatz for wavefunction (n < Na=8))\n\nEcal, grid, def, adams = demo_hydrogen(n=10, ℓ=5)\nZ = OUTSCH(Ecal, grid, def, adams.σ);\nprintln(\"\\nZ: WKB Ansatz for wavefunction (n < Na=$(def.pos.Na)))\")\n    Orbital: 10h\n        principal quantum number: n = 10\n        radial quantum number: n′ = 4 (number of nodes in radial wavefunction)\n        orbital angular momentum of valence electron: ℓ = 5\n    CamiDiff.Grid created: exponential, Float64, Rmax = 360.0 a.u., N = 550, h = 0.0181818, r0 = 0.0163447\n    Def created for hydrogen 10h on exponential grid\n\n    Z: WKB Ansatz for wavefunction (n < Na=70))\n\nplot_wavefunction(Z, 1:def.pos.Na, grid, def; reduced=true)\n\nThe plot is made using CairomMakie. NB.: plot_wavefunction is not included in the CamiXon package. (Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.OUTSCH_WJ!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, Grid{T}, Def{T}, Adams{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.OUTSCH_WJ!","text":"OUTSCH_WJ!(Z::Vector{Complex{T}}, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.OUTSCH_WKB!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, T, Grid{T}, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.OUTSCH_WKB!","text":"OUTSCH_WKB!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.adams_moulton_outward!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, Def{T}, Adams{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.adams_moulton_outward!","text":"adams_moulton_outward!(def::Def{T}, adams::Adams{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#Radial-integration-inward","page":"Numerical integration","title":"Radial integration - inward","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"INSCH!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\nINSCH_WKB!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\nadams_moulton_inward!(Z::Vector{Complex{T}}, def::Def{T}, adams::Adams{T}) where T<:Real","category":"page"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.INSCH!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, T, Grid{T}, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.INSCH!","text":"INSCH!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\n\nAnsatz solution for the inward integration of the radial wave equation for the first k points  on the CamiDiff.Grid, where k is the Adams-Moulton order. The Ansatz is based on the WKB solution  for energy E at distances far above the upper classical turning point - uctp)\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.INSCH_WKB!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, T, Grid{T}, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.INSCH_WKB!","text":"INSCH_WKB!(Z::Vector{Complex{T}}, E::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\n\nWKB Ansatz of k+1 points for INSCH!\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.adams_moulton_inward!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, Def{T}, Adams{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.adams_moulton_inward!","text":"adams_moulton_inward!(E::T, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#Radial-integration-boundary-condition","page":"Numerical integration","title":"Radial integration - boundary condition","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"adams_moulton_normalize!(Z::Vector{Complex{T}}, ΔQ::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real","category":"page"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.adams_moulton_normalize!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, T, Grid{T}, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.adams_moulton_normalize!","text":"adams_moulton_normalize!(Z::Vector{Complex{T}}, ΔQ::T, grid::CamiDiff.Grid{T}, def::Def{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#Adams-Moulton-Master-procedures","page":"Numerical integration","title":"Adams-Moulton Master procedures","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/#Init-the-energy-object","page":"Numerical integration","title":"Init - the energy object","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"Init{T} where T<:Real\ncastInit(E::T, def::Def{T}) where T<:Real","category":"page"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.Init","page":"Numerical integration","title":"CamiXon.Init","text":"Init{T} where T<:Real\n\nEnergy object with fields:\n\n.Emin : lower energy limit (::T)\n.E : trial energy (::T)\n.Emax : upper energy limit (::T)\n.ΔE : difference with respect to previous E used to calculate current E  (::T)\n\n\n\n\n\n","category":"type"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.castInit-Union{Tuple{T}, Tuple{T, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.castInit","text":"castInit(E::T, def::Def{T}) where T<:Real\n\nCreate and initialize the energy object Init according to the  specifications given in the Def object.\n\n.Emin : lower energy limit (::T)\n.E : trial energy (::T)\n.Emax : upper energy limit (::T)\n.ΔE : difference with respect to previous E used to calculate current E  (::T)\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#Adams-Moulton-node-search","page":"Numerical integration","title":"Adams-Moulton node search","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"adams_moulton_nodes(E::Real, scr::Vector{T}, grid::CamiDiff.Grid{T}, def::Def{T}; imax=25, msg=true) where T<:Real\nadams_moulton_report_nodes(i::Int, init::Init{T}, grid::CamiDiff.Grid{T}, def::Def{T}, strΔT::String; unitIn=\"Hartree\", msg=true) where T<:Real","category":"page"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.adams_moulton_nodes-Union{Tuple{T}, Tuple{Real, Vector{T}, Grid{T}, Def{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.adams_moulton_nodes","text":"adams_moulton_nodes(E::Real, scr::Vector{T}, grid::CamiDiff.Grid{T}, def::Def{T}; imax=25, msg=true) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.adams_moulton_report_nodes-Union{Tuple{T}, Tuple{Int64, Init{T}, Grid{T}, Def{T}, String}} where T<:Real","page":"Numerical integration","title":"CamiXon.adams_moulton_report_nodes","text":"adams_moulton_report_nodes(i::Int, init::Init{T}, grid::CamiDiff.Grid{T}, def::Def{T}, strΔT::String; unitIn=\"Hartree\", msg=true) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#Adams-Moulton-iteration","page":"Numerical integration","title":"Adams-Moulton iteration","text":"","category":"section"},{"location":"man/adams-moulton/adams-moulton/","page":"Numerical integration","title":"Numerical integration","text":"adams_moulton_iterate!(Z::Vector{Complex{T}}, init::Init{T}, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams{T}; imax=25, ϵ=1e-6, msg=true) where T<:Real\nadams_moulton_report_iterate(i::Int, imax::Int, init::Init{T}, ϵ, grid::CamiDiff.Grid{T}, def::Def{T}, strΔT::String; unitIn=\"Hartree\", msg=true) where T<:Real","category":"page"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.adams_moulton_iterate!-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, Init{T}, Grid{T}, Def{T}, Adams{T}}} where T<:Real","page":"Numerical integration","title":"CamiXon.adams_moulton_iterate!","text":"adams_moulton_iterate!(Z::Vector{Complex{T}}, init::Init{T}, grid::CamiDiff.Grid{T}, def::Def{T}, adams::Adams{T}; imax=25, ϵ=1e-6, msg=true) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/adams-moulton/#CamiXon.adams_moulton_report_iterate-Union{Tuple{T}, Tuple{Int64, Int64, Init{T}, Any, Grid{T}, Def{T}, String}} where T<:Real","page":"Numerical integration","title":"CamiXon.adams_moulton_report_iterate","text":"adams_moulton_report_iterate(i::Int, imax::Int, init::Init{T}, ϵ, grid::CamiDiff.Grid{T}, def::Def{T}, strΔT::String; unitIn=\"Hartree\", msg=true) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"man/codata/#Codata","page":"Codata","title":"Codata","text":"","category":"section"},{"location":"man/codata/","page":"Codata","title":"Codata","text":"Codata","category":"page"},{"location":"man/codata/#CamiXon.Codata","page":"Codata","title":"CamiXon.Codata","text":"Codata\n\nObject to hold the natural constants from CODATA. It is best created with the function castCodata\n\nThe fields are:\n\n.∆νCs: Cs hyperfine transition frequency (::Value)\n.c: speed of light in vacuum (::Value)\n.h: Planck constant (::Value)\n.ħ: Planck constant - reduced (::Value)\n.e: elementary charge (::Value)\n.kB: Boltzmann constant (::Value)\n.NA: Avogadro constant (::Value)\n.Kcd: Luminous efficacy (::Value)\n.me: electron rest mass (::Value)\n.R∞: Rydberg constant (::Value)\n.Ry: Rydberg frequency (::Value)\n.Eh: Hartree a.u. (::Value)\n.α: fine-structure constant (::Value)\n.μ0: magnetic permitivity of vacuum (::Value)\n.ε0: electric permitivity of vacuum (::Value)\n.KJ: Josephson constant (::Value)\n.RK: Von Klitzing constant (::Value)\n.R: Molar gas constant (::Value)\n.u: unified atomic mass unit (::Value)\n.matE: unit conversion matrix (Matrix{Float64})\n\nExample:\n\njulia> codata = castCodata(2022);\n\njulia> codata.μ0\nValue(1.2566370612696005e-6, \"N A⁻²\")\n\njulia> codata.μ0.val\n1.2566370612696005e-6\n\n\n\n\n\n","category":"type"},{"location":"man/codata/#castCodata","page":"Codata","title":"castCodata","text":"","category":"section"},{"location":"man/codata/","page":"Codata","title":"Codata","text":"castCodata(year::Int)","category":"page"},{"location":"man/codata/#CamiXon.castCodata-Tuple{Int64}","page":"Codata","title":"CamiXon.castCodata","text":"castCodata(year::Int)\n\nMethod to create the Codata object\n\nExample:\n\njulia> codata = castCodata(2022);\n\njulia> strValue.([codata.∆νCs,codata.c,codata.h])\n3-element Vector{String}:\n \"9192631770 Hz\"\n \"299792458 m s⁻¹\"\n \"6.62607e-34 J Hz⁻¹\"\n\n\n\n\n\n","category":"method"},{"location":"man/codata/#listCodata","page":"Codata","title":"listCodata","text":"","category":"section"},{"location":"man/codata/","page":"Codata","title":"Codata","text":"listCodata(codata::Codata; msg=true)","category":"page"},{"location":"man/codata/#CamiXon.listCodata-Tuple{Codata}","page":"Codata","title":"CamiXon.listCodata","text":"listCodata(codata::Codata)\n\nMethod to list the fields of Codata by their symbolic name\n\nExample:\n\njulia> julia> codata = castCodata(2018);\n\njulia> listCodata(codata)\n∆νCs = 9192631770 Hz      - ¹³³Cs hyperfine transition frequency\n   c = 299792458 m s⁻¹    - speed of light in vacuum\n   h = 6.62607e-34 J Hz⁻¹ - Planck constant\n   ħ = 1.05457e-34 J s    - Planck constant (reduced)\n   e = 1.60218e-19 C      - elementary charge\n  kB = 1.38065e-23 J K⁻¹  - Boltzmann constant\n  NA = 6.02214e23 mol⁻¹   - Avogadro constant\n Kcd = 683 lm W⁻¹         - Luminous efficacy\n  mₑ = 9.10938e-31 kg     - electron mass\n  mₚ = 1.67262e-27 kg     - proton mass\n  R∞ = 1.09737e7 m⁻¹      - Rydberg constant\n  Ry = 3.28984e15 Hz      - Rydberg frequency\n  Eₕ = 4.35974e-18 J      - Hartree atomic unit\n   α = 0.00729735         - fine-structure constant\n  a0 = 5.29177e-11 m      - Bohr radius\n  μB = 9.27401e-24 J T⁻¹  - Bohr magneton\n  μN = 5.05078e-27 J T⁻¹  - nuclear magneton\n  μ₀ = 1.25664e-6 N A⁻²   - magnetic permitivity of vacuum\n  ε₀ = 8.85419e-12 F m⁻¹  - electric permitivity of vacuum\n  KJ = 4.83598e14 Hz V⁻¹  - Josephson constant\n  RK = 25812.8 Ω          - Von Klitzing constant\n   R = 8.31446 J mol⁻¹K⁻¹ - Molar gas constant\n   u = 1.66054e-27 kg     - unified atomic mass unit\n\n\n\n\n\n","category":"method"},{"location":"man/codata/#Value","page":"Codata","title":"Value","text":"","category":"section"},{"location":"man/codata/","page":"Codata","title":"Codata","text":"Value","category":"page"},{"location":"man/codata/#CamiXon.Value","page":"Codata","title":"CamiXon.Value","text":"Value(val::Real, unit::String)\n\nObject to hold a real numerical value together with a unit specifier.\n\nThe fields are:\n\n.val: numerical value (::Real)\n.unit: unit specifier (::String)\n\nExample:\n\njulia> f = Value(1,\"Hz\")\nValue(1, \"Hz\")\n\njulia> f.val\n1\n\njulia> f.unit\n\"Hz\"\n\n\n\n\n\n","category":"type"},{"location":"man/codata/#strValue","page":"Codata","title":"strValue","text":"","category":"section"},{"location":"man/codata/","page":"Codata","title":"Codata","text":"strValue(f::Value)","category":"page"},{"location":"man/codata/#CamiXon.strValue-Tuple{Value}","page":"Codata","title":"CamiXon.strValue","text":"strValue(f::Value)\n\nString expression for a Value object in :compact => true representation\n\nExample:\n\njulia> f = Value(1,\"Hz\")\nValue(1, \"Hz\")\n\njulia> strValue(f)\n\"1 Hz\"\n\n\n\n\n\n","category":"method"},{"location":"man/codata/#NamedValue","page":"Codata","title":"NamedValue","text":"","category":"section"},{"location":"man/codata/","page":"Codata","title":"Codata","text":"NamedValue","category":"page"},{"location":"man/codata/#CamiXon.NamedValue","page":"Codata","title":"CamiXon.NamedValue","text":"NamedValue(val::Value, name::String, comment::String)\n\nObject to hold a Value together with its symbolic name and a short description\n\nThe fields are:\n\n.val: Value  (::Value)\n.name: symbolic name (::String)\n.comment: description (::String)\n\nNamed Value object The object NamedValue is best created using castNamedValue.\n\nExample:\n\njulia> f = Value(1,\"Hz\")\nValue(1, \"Hz\")\n\njulia> f = castNamedValue(f, name=\"frequency\", comment=\"comment\")\nNamedValue(Value(1, \"Hz\"), \"frequency\", \"comment\")\n\njulia> f.name\n\"frequency\"\n\n\n\n\n\n","category":"type"},{"location":"man/codata/#castNamedValue","page":"Codata","title":"castNamedValue","text":"","category":"section"},{"location":"man/codata/","page":"Codata","title":"Codata","text":"castNamedValue(val::Value; name=\" \", comment=\" \")","category":"page"},{"location":"man/codata/#CamiXon.castNamedValue-Tuple{Value}","page":"Codata","title":"CamiXon.castNamedValue","text":"castNamedValue(val::Value; name=\" \", comment=\" \")\n\nMethod to create a NamedValue object\n\nExample\n\njulia> v = Value(1.602176634e-19, \"C\");\n\njulia> nv = castNamedValue(v; name=\"e\");\n\njulia> nv.name * \" = \" * strValue(nv.val)\n\"e = 1.60218e-19 C\"\n\n\n\n\n\n","category":"method"},{"location":"man/codata/#Unit-conversion","page":"Codata","title":"Unit conversion","text":"","category":"section"},{"location":"man/codata/","page":"Codata","title":"Codata","text":"convertUnit(val, codata; unitIn=\"Hartree\", unitOut=\"xHz\")","category":"page"},{"location":"man/codata/#CamiXon.convertUnit-Tuple{Any, Any}","page":"Codata","title":"CamiXon.convertUnit","text":"convertUnit(val, codata; unitIn=\"Hartree\", unitOut=\"xHz\")\n\nUnit conversion between μHz,⋯ EHz, Hartree, Rydberg, J eV, cm-1, K, mK μK\n\ndefault input: Hartree\n\ndefault output: xHz ∈ {μHz, mHz, Hz, kHz, MHz, GHz, THz, PHz, EHz}\n\nExample:\n\njulia> codata = castCodata(2018);\njulia> convertUnit(1, codata; unitIn=\"Hz\", unitOut=\"J\")\nValue(6.62607015e-34, \"J\")\n\njulia> convertUnit(1, codata; unitIn=\"Hartree\", unitOut=\"Hz\")\nValue(6.579683920501762e15, \"Hz\")\n\njulia> f = convertUnit(1, codata) # default input (Hartree) and output (xHz);\njulia> strf = strValue(f)\n\"6.57968 PHz\"\n\n\n\n\n\n","category":"method"},{"location":"man/codata/#Calibration-report","page":"Codata","title":"Calibration report","text":"","category":"section"},{"location":"man/codata/","page":"Codata","title":"Codata","text":"calibrationReport(E, Ecal, codata::Codata; unitIn=\"Hartree\", msg=true)","category":"page"},{"location":"man/codata/#CamiXon.calibrationReport-Tuple{Any, Any, Codata}","page":"Codata","title":"CamiXon.calibrationReport","text":"calibrationReport(E, Ecal, codata::Codata; unitIn=\"Hartree\", msg=true)\n\nComparison of energy E with calibration value Ecal\n\ndefault input: Hartree\n\nExample:\n\njulia> codata = castCodata(2022)\njulia> calibrationReport(1.1, 1.0, codata; unitIn=\"Hartree\")\n\ncalibration report (Float64):\nEcal = 1 Hartree\nE = 1.1000000000000001 Hartree\nabsolute accuracy: ΔE = 0.1 Hartree (657.968 THz)\nrelative accuracy: ΔE/E = 0.0909091\n\n\n\n\n\n","category":"method"},{"location":"man/properties/orbit/#Orbital-properties","page":"Orbital properties","title":"Orbital properties","text":"","category":"section"},{"location":"man/properties/orbit/#Orbital","page":"Orbital properties","title":"Orbital","text":"","category":"section"},{"location":"man/properties/orbit/","page":"Orbital properties","title":"Orbital properties","text":"dictAtomicOrbital\nOrbit\ncastOrbit(;n=1, ℓ=0, mℓ=0, msg=true)","category":"page"},{"location":"man/properties/orbit/#CamiXon.dictAtomicOrbital","page":"Orbital properties","title":"CamiXon.dictAtomicOrbital","text":"dictAtomicOrbital\n\nExample:\n\njulia> dictAtomicOrbital\nDict{String, Tuple{Int64, Int64}} with 15 entries:\n  \"4d\" => (4, 2)\n  \"5f\" => (5, 3)\n  \"3p\" => (3, 1)\n  \"4p\" => (4, 1)\n  \"5d\" => (5, 2)\n    ⋮  =>  ⋮\n\njulia> n, l = get(dictAtomicOrbital, \"3d\", nothing)\n(3, 2)\n\n\n\n\n\n","category":"constant"},{"location":"man/properties/orbit/#CamiXon.Orbit","page":"Orbital properties","title":"CamiXon.Orbit","text":"Orbit(name, n, n′, ℓ, mℓ)\n\nType for specification of atomic orbitals with fields:\n\n.name: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in radial wavefunction)\n.ℓ:  orbital angular momentum valence electron\n.mℓ:  orbital angular momentum projection valence electron\n\nThe type Orbit is best created with the function castOrbit.\n\n\n\n\n\n","category":"type"},{"location":"man/properties/orbit/#CamiXon.castOrbit-Tuple{}","page":"Orbital properties","title":"CamiXon.castOrbit","text":"castOrbit(;n=1, ℓ=0, mℓ=0, msg=true)\n\nCreate Orbit with fields:\n\n.name: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in radial wavefunction)\n.ℓ:  orbital angular momentum valence electron\n.mℓ:  orbital angular momentum projection valence electron\n\nExample:\n\njulia> castOrbit(n=1, ℓ=0; msg=true)\nOrbital: 1s\n    principal quantum number: n = 1\n    radial quantum number: n′ = 0 (number of nodes in radial wavefunction)\n    orbital angular momentum of valence electron: ℓ = 0\n    orbital angular momentum projection of valence electron: mℓ = 0\nOrbit(\"1s\", 1, 0, 0, 0)\n\ncastOrbit(strOrbit::String; mℓ=0, msg=false)\n\nExample:\n\njulia> castOrbit(\"2p\"; mℓ=-1, msg=true)\nOrbital: 2p\n    principal quantum number: n = 2\n    radial quantum number: n′ = 0 (number of nodes in radial wavefunction)\n    orbital angular momentum of valence electron: ℓ = 1\n    orbital angular momentum projection of valence electron: mℓ = -1\nOrbit(\"2p\", 2, 0, 1, -1)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/orbit/#Spinorbital","page":"Orbital properties","title":"Spinorbital","text":"","category":"section"},{"location":"man/properties/orbit/","page":"Orbital properties","title":"Orbital properties","text":"Spinorbit\ncastSpinorbit(;n=1, ℓ=0, mℓ=0, up=true, msg=true)","category":"page"},{"location":"man/properties/orbit/#CamiXon.Spinorbit","page":"Orbital properties","title":"CamiXon.Spinorbit","text":"Spinorbit\n\nType for specification of atomic Spinorbitals with fields:\n\n.name: spinorbital name (string)\n.orbit: orbital object (Orbit)\n.ms: spin magnetic quantum number (Rational{Int})\n\nThe type Spinorbit is best created with the function castSpinorbit.\n\n\n\n\n\n","category":"type"},{"location":"man/properties/orbit/#CamiXon.castSpinorbit-Tuple{}","page":"Orbital properties","title":"CamiXon.castSpinorbit","text":"castSpinorbit(;n=1, ℓ=0, mℓ=0, up=true, msg=false)\n\nCreate Spinorbit with fields:\n\n.name: spinorbital name (string)\n.orbit: orbital object (Orbit)\n.ms: spin magnetic quantum number (Rational{Int})\n\nExample:\n\njulia> castSpinorbit(n=1, ℓ=0, msg=true)\nSpinorbital: 1s↑\n    principal quantum number: n = 1\n    radial quantum number: n′ = 0 (number of nodes in radial wavefunction)\n    orbital angular momentum of valence electron: ℓ = 0\n    orbital angular momentum projection of valence electron: mℓ = 0\n    spin magnetic quantum number: ms = 1/2\nSpinorbit(\"1s↑\", Orbit(\"1s\", 1, 0, 0, 0), 1//2)\n\ncastSpinorbit(strOrbit::String; mℓ=0, ms=1/2, msg=false)\n\nExample:\n\njulia> castSpinorbit(\"2p\"; mℓ = 1, ms=-1/2, msg=true)\nSpinorbital: 2p↓\n    principal quantum number: n = 2\n    radial quantum number: n′ = 0 (number of nodes in radial wavefunction)\n    orbital angular momentum of valence electron: ℓ = 1\n    orbital angular momentum projection of valence electron: mℓ = 1\n    spin magnetic quantum number: ms = -1/2\nSpinorbit(\"2p↓\", Orbit(\"2p\", 2, 0, 1, 1), -1//2)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/orbit/#Shells","page":"Orbital properties","title":"Shells","text":"","category":"section"},{"location":"man/properties/orbit/","page":"Orbital properties","title":"Orbital properties","text":"Shell\ncastShell(;n=1, ℓ=0, msg=false)\nShells\ncastShells(strShells::String; msg=false)","category":"page"},{"location":"man/properties/orbit/#CamiXon.Shell","page":"Orbital properties","title":"CamiXon.Shell","text":"Shell(name, spinorbitals)\n\nType for specification of closed electron shells with fields:\n\n.name: shell configuration (::String)\n.spinorbit: Array of spinorbitals (::Vector{Spinorbit})\n\nThe type Shell is best created with the function castShell.\n\n\n\n\n\n","category":"type"},{"location":"man/properties/orbit/#CamiXon.castShell-Tuple{}","page":"Orbital properties","title":"CamiXon.castShell","text":"castShell(;n=1, ℓ=0, msg=false)\n\nCreate closed electron Shell with fields:\n\n.name: shell configuration (::String)\n.spinorbit: Array of Spinorbitals (::Vector{Spinorbit})\n\nExample:\n\njulia> castShell(n=1, ℓ=0, msg=true)\nShell: 3s²\n    number of shell electrons: N = 2\n    principal quantum number: n = 3\n    orbital angular momentum of electrons: ℓ = 0\nShell(\"3s²\", Spinorbit[Spinorbit(\"3s↓\", Orbit(\"3s\", 3, 2, 0, 0), -1//2), Spinorbit(\"3s↑\", Orbit(\"3s\", 3, 2, 0, 0), 1//2)])\n\ncastShell(strShell::String; msg=false)\n\nExample:\n\njulia> castShell(\"3s\", msg=false)\nShell(\"3s²\", Spinorbit[Spinorbit(\"3s↓\", Orbit(\"3s\", 3, 2, 0, 0), -1//2), Spinorbit(\"3s↑\", Orbit(\"3s\", 3, 2, 0, 0), 1//2)])\n\n\n\n\n\n","category":"method"},{"location":"man/properties/orbit/#CamiXon.Shells","page":"Orbital properties","title":"CamiXon.Shells","text":"Shells(name, shells)\n\nType for specification of closed electron Shells with fields:\n\n.name: shell configuration (::String)\n.count: number of shells (::Int)\n.n: array of shell principal quantum numers (Vector{Int})\n.ℓ: array of shell angular momenta (::Vector{Int})\n.shell: Array of Shells (::Vector{Shell})\n\nThe type Shells is best created with the function castShells.\n\n\n\n\n\n","category":"type"},{"location":"man/properties/orbit/#CamiXon.castShells-Tuple{String}","page":"Orbital properties","title":"CamiXon.castShells","text":"castShells(strShells::String; msg=false)\n\nCreate configuration of closed electron Shells with fields:\n\n.name: shell configuration (::String)\n.count: number of shells (::Int)\n.n: array of shell principal quantum numers (Vector{Int})\n.ℓ: array of shell angular momenta (::Vector{Int})\n.shell: Array of Shells (::Vector{Shell})\n\nExample:\n\njulia> castShells(\"1s2s\",msg=true);\nShell: 1s²\n    number of shell electrons: N = 2\n    principal quantum number: n = 1\n    orbital angular momentum of electrons: ℓ = 0\nShell: 2s²\n    number of shell electrons: N = 2\n    principal quantum number: n = 2\n    orbital angular momentum of electrons: ℓ = 0\n\n\n\n\n\n","category":"method"},{"location":"man/properties/orbit/#Term","page":"Orbital properties","title":"Term","text":"","category":"section"},{"location":"man/properties/orbit/","page":"Orbital properties","title":"Orbital properties","text":"Term\ncastTerm(n::Int; ℓ=0, S=1//2, L=0, J=1//2, msg=true)","category":"page"},{"location":"man/properties/orbit/#CamiXon.Term","page":"Orbital properties","title":"CamiXon.Term","text":"Term(name::String, n::Int, ℓ::Int, S::Real, L::Int, J::Real)\n\nType for specification of atomic fine-structure Terms with fields:\n\nname: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in wavefunction)\n.ℓ:  orbital angular momentum valence electron\n.S:  total electron spin in units of ħ\n.L:  total orbital angular momentum in units of ħ\n.J:  total electronic angular momentum in units of ħ\n\nThe type Term is best created with the function castTerm.\n\n\n\n\n\n","category":"type"},{"location":"man/properties/orbit/#CamiXon.castTerm-Tuple{Int64}","page":"Orbital properties","title":"CamiXon.castTerm","text":"castTerm(n::Int; ℓ=0, S=1//2, L=0, J=1//2, msg=false)\n\nSpecify Term in the Term notatation with fields:\n\n.n: principal quantum number\n.n′: radial quantum number (number of nodes - autogenerated)\n.ℓ: orbital angular momentum valence electron\n.S: total electron spin\n.L: total orbital angular momentum\n.J: total electronic angular momentum\n\nExamples:\n\njulia> castTerm(1; ℓ=0, S=1//2, L=0, J=1//2, msg=true)\nTerm created: 1s ²S₁⸝₂; n = 1,  n′ = 0, ℓ = 0, S = 1//2, L = 0, J = 1//2\nTerm(\"1s ²S₁⸝₂\", 1, 0, 0, 1//2, 0, 1//2)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#Principal-properties","page":"Principal properties","title":"Principal properties","text":"","category":"section"},{"location":"man/properties/atom/#Element","page":"Principal properties","title":"Element","text":"","category":"section"},{"location":"man/properties/atom/","page":"Principal properties","title":"Principal properties","text":"Element\ncastElement(;Z=1, msg=true)\nlistElement(Z::Int; fmt=Object)\nlistElements(Z1::Int, Z2::Int; fmt=Object)","category":"page"},{"location":"man/properties/atom/#CamiXon.Element","page":"Principal properties","title":"CamiXon.Element","text":"Element(name, symbol, weight)\n\nType with fields:\n\n.name:  name of element (::String)\n.symbol:  symbol of element  (::String)\n.weight:  relative atomic mass - atomic weight (::Float64)\n\nThe type Element is best created with the function castElement.\n\n\n\n\n\n","category":"type"},{"location":"man/properties/atom/#CamiXon.castElement-Tuple{}","page":"Principal properties","title":"CamiXon.castElement","text":"castElement(;Z=1, msg=true)\ncastElement(elt::String; msg=true)\n\nCreate Atom with fields\n\n.name:  name of element\n.symbol:  symbol of element\n.weight:  relative atomic mass (atomic weight)\nZ: atomic number (nuclear charge number)\n\nelt: symbolic element name\n\nExample:\n\njulia> castElement(\"Rb\"; msg=false) == castElement(Z=37, msg=false)\ntrue\n\njulia> element = castElement(;Z=1, msg=true);\nElement created: H, hydrogen, Z=1, weight=1.008\n\njulia> element = castElement(;Z=1, msg=false)\nElement(\"hydrogen\", \"H\", 1.008)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#CamiXon.listElement-Tuple{Int64}","page":"Principal properties","title":"CamiXon.listElement","text":"listElement(Z::Int[; fmt=Object])\nlistElement(elt::String[; fmt=Object])\n\nProperties of element with atomic number Z and symbolic name elt\n\nOutput options: fmt =  Object (default), String, Info.\n\nExample:\n\njulia> listElement(\"H\") == listElement(1)\ntrue\n\njulia> listElement(1; fmt=Info)\nElement: hydrogen\n  symbol: H\n  atomic number: Z = 1\n  atomic weight (relative atomic mass): 1.008\n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#CamiXon.listElements-Tuple{Int64, Int64}","page":"Principal properties","title":"CamiXon.listElements","text":"listElements(Z1::Int, Z2::Int[; fmt=Object])\nlistElements(itr::UnitRange{Int}; fmt=Object)\n\nProperties of elements with atomic number in the range itr = Z1:Z2.\n\nOutput options: fmt =  Object (default), String, Info.\n\nExample\n\njulia> listElements(1,3) == listElements(1:3)\ntrue\n\njulia> listElements(1:3; fmt=Info);\nElement: hydrogen\n  symbol: H\n  atomic number: Z = 1\n  atomic weight (relative atomic mass): 1.008\nElement: helium\n  symbol: He\n  atomic number: Z = 2\n  atomic weight (relative atomic mass): 4.0026\nElement: lithium\n  symbol: Li\n  atomic number: Z = 3\n  atomic weight (relative atomic mass): 6.94\n\njulia> listElements(1:3; fmt=String)\n3-element Vector{Any}:\n \"H, hydrogen, Z=1, weight=1.008\"\n \"He, helium, Z=2, weight=4.0026\"\n \"Li, lithium, Z=3, weight=6.94\"    \n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#Dictionary","page":"Principal properties","title":"Dictionary","text":"","category":"section"},{"location":"man/properties/atom/","page":"Principal properties","title":"Principal properties","text":"dictElement","category":"page"},{"location":"man/properties/atom/#CamiXon.dictElement","page":"Principal properties","title":"CamiXon.dictElement","text":"dictElement\n\nStandard atomic weights of the elements 2021 - see IUPAC Technical Report\n\njulia> dictElement\nDict{Int64, Tuple{String, String, Any}} with 102 entries:\n  5  => (\"boron\", \"B\", 10.81)\n  56 => (\"barium\", \"Ba\", 137.33)\n  35 => (\"bromine\", \"Br\", 79.904)\n  55 => (\"caesium\", \"Cs\", 132.91)\n  60 => (\"neodymium\", \"Nd\", 144.24)\n  30 => (\"zinc\", \"Zn\", 65.38)\n   ⋮ =>  ⋮\n\nExamples:\n\njulia> get(dictElement, 37, nothing)\n(\"rubidium\", \"Rb\", 85.468)\n\njulia> listElement(\"Rb\", fmt=Info)\nElement: rubidium\n  symbol: Rb\n  atomic number: Z = 37\n  atomic weight (relative atomic mass): 85.468\n\n\n\n\n\n","category":"constant"},{"location":"man/properties/atom/#Isotope","page":"Principal properties","title":"Isotope","text":"","category":"section"},{"location":"man/properties/atom/","page":"Principal properties","title":"Principal properties","text":"Isotope\ncastIsotope(;Z=1, A=1, msg=true)\nlistIsotope(Z::Int, A::Int; fmt=Object, msg=true)\nlistIsotopes(Z1::Int, Z2::Int; fmt=Object)\nlatexIsotopeTable(Z1::Int, Z2::Int; continuation=false)","category":"page"},{"location":"man/properties/atom/#CamiXon.Isotope","page":"Principal properties","title":"CamiXon.Isotope","text":"Isotope(symbol, name, Z, A, N, R, M, I, π, T½, mdm, eqm, ra)\n\nType with fields:\n\n.symbol: symbol (::String)\n.name: name (::String)\n.Z:  atomic number (::Int)\n.A:  atomic mass number in amu (::Int)\n.N:  neutron number (::Int)\n.R:  rms charge radius in Fermi (::Float64)\n.M:  atomic mass in amu (::Float64)\n.I:  nuclear spin in units of ħ  (::Rational{Int})\n.π:  parity of nuclear state (::Int)\n.T½:  lifetime in years (::Float64)\n.mdm: nuclear magnetic dipole moment (::Float64)\n.eqm: nuclear electric quadrupole moment (::Float64)\n.ra:  relative abundance in % (::Float64)\n\nThe type Isotope is best created with the function castIsotope.\n\n\n\n\n\n","category":"type"},{"location":"man/properties/atom/#CamiXon.castIsotope-Tuple{}","page":"Principal properties","title":"CamiXon.castIsotope","text":"castIsotope(;Z=1, A=1, msg=false)\ncastIsotope(elt::String; A=1, msg=false)\n\nCreate Isotope with fields\n\n.symbol: symbol (::String)\n.name: symbol (::String)\n.Z:  atomic number (::Int)\n.A:  atomic mass number in amu (::Int)\n.N:  neutron number (::Int)\n.R:  rms charge radius in Fermi (::Float64)\n.M:  atomic mass in amu (::Float64)\n.I:  nuclear spin in units of ħ (::Rational{Int})\n.π:  parity of nuclear state (::Int)\n.ra:  relative abundance in % (::Float64)\n.mdm: nuclear magnetic dipole moment (::Float64)\n.eqm: nuclear electric quadrupole moment (::Float64)\n.T½:  lifetime in years (::Float64)\n\nZ: atomic number (nuclear charge number) elt: symbolic element name\n\nExamples:\n\njulia> castIsotope(\"Rb\"; A=87) == castIsotope(Z=37, A=87)\ntrue\n\njulia> isotope = castIsotope(Z=1, A=3)\nIsotope(\"³T\", \"tritium\", 1, 3, 2, 1.7591, 3.016049281, 1//2, 1, 12.33, 2.97896246, 0.0, nothing)\n\njulia> string(isotope.T½) *  \" seconds\"\n\"12.33 seconds\"\n\njulia> castIsotope(Z=1, A=3, msg=true);\nIsotope created: ³T, tritium, Z=1, A=3, N=2, R=1.7591, M=3.016049281, I=1/2⁺, μI=2.97896246, Q=0.0, RA=trace, (radioactive)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#CamiXon.listIsotope-Tuple{Int64, Int64}","page":"Principal properties","title":"CamiXon.listIsotope","text":"listIsotope(Z::Int, A::Int; fmt=Object)\n\nProperties of isotopes with atomic number Z and atomic mass number A.\n\nOutput options: fmt =  Object (default), String, Latex, Info.\n\nExample:\n\njulia> listIsotope(1,3; fmt=Info);\nIsotope: tritium-3\n  symbol: ³T\n  element: tritium\n  atomic number: Z = 1\n  atomic mass number: A = 3\n  neutron number: N = 2\n  rms nuclear charge radius: R = 1.7591 fm\n  atomic mass: M = 3.016049281 amu\n  nuclear spin: I = 1/2 ħ\n  parity of nuclear state: π = even\n  nuclear magnetic dipole moment: μI = 2.97896246 μN\n  nuclear electric quadrupole moment: Q = 0.0 barn\n  relative abundance: RA = trace\n  lifetime: 12.33 years\n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#CamiXon.listIsotopes-Tuple{Int64, Int64}","page":"Principal properties","title":"CamiXon.listIsotopes","text":"listIsotopes(Z1::Int, Z2::Int; fmt=Object)\nlistIsotopes(itr; fmt=Object)\n\nAll isotopes with atomic number in the range itr = Z1:Z2.\n\nOutput options: Object (default), String, Latex, Info.\n\nExample:\n\njulia> listIsotopes(1,3) == listIsotopes(1:3)\ntrue\n\njulia> listIsotopes(1:1; fmt=Object)\n3-element Vector{Any}:\n Isotope(\"¹H\", \"hydrogen\", 1, 1, 0, 0.8783, 1.007825032, 1//2, 1, 1.0e100, 2.792847351, 0.0, 99.9855)\n Isotope(\"²D\", \"deuterium\", 1, 2, 1, 2.1421, 2.014101778, 1, 1, 1.0e100, 0.857438231, 0.0028578, 0.0145)\n Isotope(\"³T\", \"tritium\", 1, 3, 2, 1.7591, 3.016049281, 1//2, 1, 12.33, 2.97896246, 0.0, nothing)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#CamiXon.latexIsotopeTable-Tuple{Int64, Int64}","page":"Principal properties","title":"CamiXon.latexIsotopeTable","text":"latexIsotopeTable(Z1::Int, Z2::Int; continuation=false)\nlatexIsotopeTable(itrZ::UnitRange; continuation=false)\n\nIsotope table for all isotopes with atomic number from Z1 to Z2.\n\nExample:\n\no = latexIsotopeTable(1:3);\nprintln(o)\n  \\setlength{\\tabcolsep}{3pt}\n  \\renewcommand{\\arraystretch}{1.2}\n  \\begin{table}[H]\n    \\centering\n    \\caption{\\label{table:Isotopes-a-1}Properties of selected atomic isotopes. The Table is based on three databases: (a) AME2020 (atomic mass evaluation); (b) IAEA-INDC(NDS)-794 (magnetic dipole moments); (c) IAEA-INDC(NDS)-833 (electric quadrupole moments).}\n    \\begin{tabular}{r|lr|rrrr|r|r|r|r}\n      \\multicolumn{12}{r}\\vspace{-18pt}\\\\\n      \\hline\n      \\hline\n      $Z$ & element & symbol & $A$ & $N$ & radius & atomic mass & $I\\,^\\pi$ & $\\mu_I $ & $Q$ & $RA$\\\\&  &  &  &  & (fm) & $(m_u)$ & $(\\hbar)\\ \\ $ & $(\\mu_N)$ & (barn) & (\\%)\\\\\\hline\n      1 & hydrogen & $^{1}$H & 1\\, & 0 & 0.8783 & 1.007825032 & 1/2$^+$ & 2.792847351 & 0.0 & 99.9855 \\\\\n        &  & $^{2}$H & 2\\, & 1 & 2.1421 & 2.014101778 & 1//1$^+$ & 0.857438231 & 0.0028578 & 0.0145 \\\\\n        &  & $^{3}$H & 3$*\\!\\!$ & 2 & 1.7591 & 3.016049281 & 1/2$^+$ & 2.97896246 & 0.0 & trace \\\\\n      \\hline\n      2 & helium & $^{3}$He & 3\\, & 1 & 1.9661 & 3.016029322 & 1/2$^+$ & -2.12762531 & 0.0 & 0.0002 \\\\\n        &  & $^{4}$He & 4\\, & 2 & 1.6755 & 4.002603254 & 0//1$^+$ & 0.0 & 0.0 & 99.9998\\% \\\\\n      \\hline\n      3 & lithium & $^{6}$Li & 6\\, & 3 & 2.589 & 6.015122887 & 1//1$^+$ & 0.822043 & -0.000806 & 4.85 \\\\\n        &  & $^{7}$Li & 7\\, & 4 & 2.444 & 7.016003434 & 3/2$^-$ & 3.256407 & -0.04 & 95.15 \\\\\n      \\hline\n      \\multicolumn{12}{l}{*radioactive }\\\\\n    \\end{tabular}\n  \\end{table}\n\nThe typeset result is shown in the figure below.\n\n(Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#Dictionary-2","page":"Principal properties","title":"Dictionary","text":"","category":"section"},{"location":"man/properties/atom/","page":"Principal properties","title":"Principal properties","text":"dictIsotope","category":"page"},{"location":"man/properties/atom/#CamiXon.dictIsotope","page":"Principal properties","title":"CamiXon.dictIsotope","text":"dictIsotope\n\nSources: AME2020, LINDC(NDS)-0794 and INDC(NDS)-0833\n\njulia> dictIsotope\nDict{Tuple{Int64, Int64}, Tuple{String, String, Int64, Int64, Int64, Float64, Float64, Real, Int64, Float64, Float64, Any, Any}} with 341 entries:\n  (71, 175) => (\"¹⁷⁵Lu\", \"lutetium\", 71, 175, 104, 5.37, 174.941, 7//2, 1, 1.0e…\n  (40, 92)  => (\"⁹²Zr\", \"zirconium\", 40, 92, 52, 4.3057, 91.905, 0, 1, 1.0e100,…\n  (48, 111) => (\"¹¹¹Cd\", \"cadmium\", 48, 111, 63, 4.5845, 110.904, 1//2, 1, 1.0e…\n  (72, 176) => (\"¹⁷⁶Hf\", \"hafnium\", 72, 176, 104, 5.3286, 175.941, 0, 1, 1.0e10…\n  (30, 68)  => (\"⁶⁸Zn\", \"zinc\", 30, 68, 38, 3.9658, 67.9248, 0, 1, 1.0e100, 0.0…\n  (76, 184) => (\"¹⁸⁴Os\", \"osmium\", 76, 184, 108, 5.3823, 183.952, 0, 1, 5.6e13,…\n  (54, 129) => (\"¹²⁹Xe\", \"xenon\", 54, 129, 75, 4.7775, 128.905, 1//2, 1, 1.0e10…\n      ⋮     =>                                ⋮\n\nExample:\n\njulia> get(dictIsotope, (37,87), nothing)\n(\"⁸⁷Rb\", \"rubidium\", 37, 87, 50, 4.1989, 86.90918053, 3//2, -1, 4.97e10, 2.75129, 0.1335, 27.83)\n\njulia> listIsotope(37, 87, fmt=Info)\nIsotope: rubidium-87\n  symbol: ⁸⁷Rb\n  element: rubidium\n  atomic number: Z = 37\n  atomic mass number: A = 87\n  neutron number: N = 50\n  rms nuclear charge radius: R = 4.1989 fm\n  atomic mass: M = 86.90918053 amu\n  nuclear spin: I = 3/2 ħ\n  parity of nuclear state: π = odd\n  nuclear magnetic dipole moment: μI = 2.75129 μN\n  nuclear electric quadrupole moment: Q = 0.1335 barn\n  relative abundance: RA = 27.83%\n  lifetime: 4.97e10 years\n\n\n\n\n\n","category":"constant"},{"location":"man/properties/atom/#Atom","page":"Principal properties","title":"Atom","text":"","category":"section"},{"location":"man/properties/atom/","page":"Principal properties","title":"Principal properties","text":"Atom\ncastAtom(;Z=1, A=1, Q=0, msg=true)\nlistAtom(Z::Int, A::Int, Q::Int; fmt=Object)\nlistAtoms(Z1::Int, Z2::Int, Q::Int; fmt=Object)","category":"page"},{"location":"man/properties/atom/#CamiXon.Atom","page":"Principal properties","title":"CamiXon.Atom","text":"Atom(Z, A, Q, Zc, element, isotope, config)\n\nType with fields:\n\n.Z:  atomic number (::Int)\n.A:  atomic mass number in amu (::Int)\n.Q:  ionic charge in a.u. (::Int)\n.Zc:  Rydberg charge in a.u. (::Int)\n.element:  (::Element)\n.isotope:  (::Isotope)\n.config:  electron configuration (::String)\n\nThe type Atom is best created with the function castAtom.\n\n\n\n\n\n","category":"type"},{"location":"man/properties/atom/#CamiXon.castAtom-Tuple{}","page":"Principal properties","title":"CamiXon.castAtom","text":"castAtom(;Z=1, A=1, Q=0, msg=false)\ncastAtom(elt::String; A=1, Q=0, msg=false)\n\nCreate Atom with fields:\n\n.Z:  atomic number (::Int)\n.A:  atomic mass number in amu (::Int)\n.Q:  ionic charge in a.u. (::Int)\n.Zc:  Rydberg charge in a.u. (::Int)\n.element:  (::Element)\n.isotope:  (::Isotope)\n\nelt: symbolic element name\n\nExamples:\n\njulia> castAtom(\"Rb\"; A=87, Q=0) == castAtom(Z=37, A=87, Q=0)\ntrue\n\njulia> castAtom(Z=1, A=3, Q=0)\nAtom(1, 3, 0, 1, Element(\"hydrogen\", \"H\", 1.008), Isotope(\"³T\", \"tritium\", 1, 3, 2, 1.7591, 3.016049281, 1//2, 1, 12.33, 2.97896246, 0.0, nothing))\n\njulia> atom = castAtom(Z=1, A=3, Q=0, msg=true);\nElement created: H, hydrogen, Z=1, weight=1.008\nIsotope created: ³T, tritium, Z=1, A=3, N=2, R=1.7591, M=3.016049281, I=1/2⁺, μI=2.97896246, Q=0.0, RA=trace, (radioactive)\nAtom created: tritium, neutral atom, ³T, Z=1, A=3, Q=0, Zc=1\n\njulia> atom\nAtom(1, 3, 0, 1, Element(\"hydrogen\", \"H\", 1.008), Isotope(\"³T\", \"tritium\", 1, 3, 2, 1.7591, 3.016049281, 1//2, 1, 12.33, 2.97896246, 0.0, nothing))\n\njulia> string(atom.isotope.T½) * \" seconds\"\n\"12.33 seconds\"\n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#CamiXon.listAtom-Tuple{Int64, Int64, Int64}","page":"Principal properties","title":"CamiXon.listAtom","text":"listAtom(Z::Int, A::Int, Q::Int[; fmt=Object])\n\nProperties of atom with atomic number Z, atomic mass number A, ionic charge Q.\n\nOutput options: fmt =  Object (default), String, Info.\n\nExample:\n\njulia> listAtom(\"H\", 3, 0) == listAtom(1, 3, 0)\ntrue\n\njulia> listAtom(1, 3, 0; fmt=Info)\nAtom: tritium, neutral atom\n  symbol: ³T\n  atomic charge: Z = 1\n  Rydberg charge: Zc = 1\n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#CamiXon.listAtoms-Tuple{Int64, Int64, Int64}","page":"Principal properties","title":"CamiXon.listAtoms","text":"listAtoms(Z1::Int, Z2::Int, Q::Int[; fmt=Object])\n\nProperties of atoms with atomic number in the range Z1:Z3 and ionic charge Q.\n\nOutput options: fmt =  Object (default), String, Info.\n\nExample\n\njulia> listAtoms(1,3,0) == listAtoms(1:3,0)\ntrue\n\njulia> listAtoms(1:1, 0; fmt=Info);\nAtom: hydrogen, neutral atom\n  symbol: ¹H\n  atomic charge: Z = 1\n  Rydberg charge: Zc = 1\nAtom: deuterium, neutral atom\n  symbol: ²D\n  atomic charge: Z = 1\n  Rydberg charge: Zc = 1\nAtom: tritium, neutral atom\n  symbol: ³T\n  atomic charge: Z = 1\n  Rydberg charge: Zc = 1\n\n\n\n\n\n","category":"method"},{"location":"man/properties/atom/#Dictionaries","page":"Principal properties","title":"Dictionaries","text":"","category":"section"},{"location":"man/properties/atom/","page":"Principal properties","title":"Principal properties","text":"dictAtomicNumber\ndictCoreConfiguration\ndictConfiguration","category":"page"},{"location":"man/properties/atom/#CamiXon.dictAtomicNumber","page":"Principal properties","title":"CamiXon.dictAtomicNumber","text":"dictAtomicNumber\n\njulia> dictAtomicNumber\nDict{String, Int64} with 102 entries: \n  \"Pd\" => 46\n  \"Si\" => 14\n  \"C\"  => 6\n  \"P\"  => 15\n  \"Nb\" => 41\n    ⋮  =>  ⋮\n\nExamples:\n\njulia> Z = get(dictAtomicNumber, \"Rb\", nothing)\n37\n\njulia> listElement(Z; fmt=Info)\nElement: rubidium\nsymbol: Rb\natomic number: Z = 37\natomic weight (relative atomic mass): 85.468\n\n\n\n\n\n","category":"constant"},{"location":"man/properties/atom/#CamiXon.dictCoreConfiguration","page":"Principal properties","title":"CamiXon.dictCoreConfiguration","text":"dictCoreConfiguration\n\nClosed-shell configuration for the elements in the periodic table.\n\njulia> dictCoreConfiguration\nDict{String, String} with 15 entries:\n  \"[Ne]\" => \"1s²2s²2p⁶\"\n  \"[Cd]\" => \"1s²2s²2p⁶3s²3p⁶3d¹⁰4s²4p⁶5s²4d¹⁰\"\n  \"[Sr]\" => \"1s²2s²2p⁶3s²3p⁶3d¹⁰4s²4p⁶5s²\"\n  \"[Yb]\" => \"1s²2s²2p⁶3s²3p⁶3d¹⁰4s²4p⁶5s²4d¹⁰5p⁶6s²4f¹⁴\"\n  \"[Mg]\" => \"1s²2s²2p⁶3s²\"\n  \"[Ba]\" => \"1s²2s²2p⁶3s²3p⁶3d¹⁰4s²4p⁶5s²4d¹⁰5p⁶6s²\"\n  \"[Xe]\" => \"1s²2s²2p⁶3s²3p⁶3d¹⁰4s²4p⁶5s²4d¹⁰5p⁶\"\n  ⋮  => ⋮\n\nExamples:\n\njulia> dict = dictCoreConfiguration;\n\njulia> get(dict, \"[Yb]\", nothing)\n\"1s²2s²2p⁶3s²3p⁶3d¹⁰4s²4p⁶5s²4d¹⁰5p⁶6s²4f¹⁴\"\n\n\n\n\n\n","category":"constant"},{"location":"man/properties/atom/#CamiXon.dictConfiguration","page":"Principal properties","title":"CamiXon.dictConfiguration","text":"dictConfiguration\n\nElectronic ground state configurations for an atom of given (Z, Q).\n\njulia> dictConfiguration\nDict{Int64, String} with 102 entries:\n  (5, 0)  => \"[Be]2p¹\"\n  (56, 0) => \"[Ba]\"\n  (35, 0) => \"[Zn]4p⁵\"\n  (55, 0) => \"[Na]6s¹\"\n  (60, 0) => \"[Ba]4f⁴\"\n  (30, 0) => \"[Zn]\"\n  (32, 0) => \"[Zn]4p²\"\n  ⋮  => ⋮\n\nExamples:\n\njulia> Z, Q = (get(dictAtomicNumber, \"Ta\", nothing), 0)\n(73, 0)\n\njulia> dict = dictConfiguration;\n\njulia> get(dict, (Z, Q), nothing)\n\"[Yb]5d³\"\n\n\n\n\n\n","category":"constant"},{"location":"man/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/","page":"Index","title":"Index","text":"","category":"page"},{"location":"man/properties/hydrogen/#Hydrogen","page":"Hydrogen","title":"Hydrogen","text":"","category":"section"},{"location":"man/properties/hydrogen/#Atomic-properties","page":"Hydrogen","title":"Atomic properties","text":"","category":"section"},{"location":"man/properties/hydrogen/","page":"Hydrogen","title":"Hydrogen","text":"bohrformula(Z::Int, n::Int)\nhydrogenic_reduced_wavefunction(atom::Atom, orbit::Orbit, grid::CamiDiff.Grid{T}) where T<:Real\nreduce_wavefunction(Z::Vector{Complex{T}}, grid::CamiDiff.Grid{T}) where T<:Real\nrestore_wavefunction(Z::Vector{Complex{T}}, atom::Atom, orbit::Orbit, grid::CamiDiff.Grid{T}) where T<:Real","category":"page"},{"location":"man/properties/hydrogen/#CamiXon.bohrformula-Tuple{Int64, Int64}","page":"Hydrogen","title":"CamiXon.bohrformula","text":"bohrformula(Z::Int, n::Int)\n\nHydrogenic energy (in Hartree a.u.) for atom with atomic number Z and principal quantum number n.\n\n    E_n = - fracZ^22n^2\n\nExample:\n\njulia> Z = 2; n = 4;\n\njulia> bohrformula(Z,n)\n-1//8\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#CamiXon.hydrogenic_reduced_wavefunction-Union{Tuple{T}, Tuple{Atom, Orbit, Grid{T}}} where T<:Real","page":"Hydrogen","title":"CamiXon.hydrogenic_reduced_wavefunction","text":"hydrogenic_reduced_wavefunction(atom::Atom, orbit::Orbit, grid::CamiDiff.Grid{T}) where T<:Real\n\nAnalytic expression for the hydrogenic wavefunction written in the format Z = tildeχ + i tildeχ^, where tildeχ_nℓ(ρ) is the reduced radial wavefunction and tildeχ^_nℓ(ρ) its derivative, with ρ the radial distance to the nucleus in a.u.. The expression is evaluated for a given Atom in a given Orbit on a given CamiDiff.Grid. The argument Def completes the definition of the problem.\n\n    tildechi_nl(rho)\n    =mathcalN_nl^-12(2Zn)^l+32rho^l+1e^-Zρn\n    L_n-l-1^2l+1(2Zrhon)\n\nwhere L_n-l-1^2l+1(2Zrhon) is the generalized Laguerre polynomial CamiMath.generalized_laguerreL and\n\n    mathcalN_nl\n    = displaystyle intnolimits _0^inftyx^2l+2e^-x\n    leftL_n-l-1^2l+1(x)right^2dx\n    = frac2nGamma(n+l+1)Gamma(n-l)\n\nis the norm of the wavefunction.\n\nExample:\n\njulia> codata = castCodata(2022);\n\njulia> atom = castAtom(;Z=1, A=1, Q=0, msg=false);\n\njulia> orbit = castOrbit(n=25, ℓ=10);\n\njulia> grid = autoGrid(atom, orbit, Float64; msg=true);\nCamiDiff.Grid created: exponential, Float64, rmax = 3651.58 a.u., N = 1320, h = 0.0075815, r0 = 0.164537\n\njulia> Z = hydrogenic_reduced_wavefunction(atom, orbit, grid);\n IOP capture at generalized_laguerre_polynom(35, 21): output converted to BigInt\n\njulia> def = castDef(grid, atom, orbit, codata; msg=true);\nDef created for ¹H:25n on exponential grid of 1320 points\n\nplot_wavefunction(Z, 1:grid.N, grid, def)\n\nThe plot is made using CairomMakie. NB.: plot_wavefunction is not included in the CamiXon package. (Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#CamiXon.reduce_wavefunction-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, Grid{T}}} where T<:Real","page":"Hydrogen","title":"CamiXon.reduce_wavefunction","text":"reduce_wavefunction(Z::Vector{Complex{T}}, grid::CamiDiff.Grid{T}) where T<:Real\n\nConversion from the ordinary radial wavefunction tildeR_nl(ρ) to the reduced radial wavefuntion\n\n    tildechi_nl(ρ) = ρ tildeR_nl(ρ)\n\nwhere ρ is the radial distance to the nucleus in a.u..\n\nExample:\n\njulia> atom = castAtom(Z=1, A=1, Q=0; msg=false);\njulia> orbit = castOrbit(n=1, ℓ=0; msg=false);\njulia> grid = autoGrid(atom, orbit, Float64);\njulia> RH1s_example = [RH1s(atom.Z, grid.r[n]) for n=1:grid.N];\njulia> ZH1s_example = reduce_wavefunction(RH1s_example, grid);\njulia> ZH1s_generic = hydrogenic_reduced_wavefunction(atom, orbit, grid);\njulia> @test ZH1s_example ≈ ZH1s_generic\nTest Passed\n\njulia> f1 = real(ZH1s_example);\njulia> f2 = real(ZH1s_generic);\njulia> compare_functions(f1, f2, 1:grid.N, grid)\n\nThe plot is made using CairomMakie. NB.: compare_functions is not included in the CamiXon package. (Image: Image) ```\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#CamiXon.restore_wavefunction-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, Atom, Orbit, Grid{T}}} where T<:Real","page":"Hydrogen","title":"CamiXon.restore_wavefunction","text":"restore_wavefunction(Z::Vector{Complex{T}}, atom::Atom, orbit::Orbit, grid::CamiDiff.Grid{T}) where T<:Real\n\nConversion from the reduced radial wavefunction tildechi_nl(ρ) to the ordinary radial wavefuntion tildeR_nl(ρ),\n\n    tildeR_nl(ρ)=tildechi_nl(ρ)ρ\n\nwhere ρ is the radial distance to the nucleus in a.u..\n\nExample:\n\n``` julia> atom = castAtom(Z=1, A=1, Q=0; msg=false); julia> orbit = castOrbit(n=1, ℓ=0; msg=false); julia> grid = autoGrid(atom, orbit, Float64); julia> RH1sexample = [RH1s(atom.Z, grid.r[n]) for n=1:grid.N]; julia> ZH1sexample = reducewavefunction(RH1sexample, grid); julia> RH1sgeneric = restorewavefunction(ZH1s_generic, atom, orbit, grid);  \n\njulia> @test RH1sexample ≈ RH1sgeneric  Test Passed\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#Some-special-cases","page":"Hydrogen","title":"Some special cases","text":"","category":"section"},{"location":"man/properties/hydrogen/","page":"Hydrogen","title":"Hydrogen","text":"RH1s(Z::Int, r::T) where T<:Real\nRH2s(Z::Int, r::T) where T<:Real\nRH2p(Z::Int, r::T) where T<:Real","category":"page"},{"location":"man/properties/hydrogen/#CamiXon.RH1s-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Hydrogen","title":"CamiXon.RH1s","text":"RH1s(Z::Int, r::T) where T <:Real\n\nAnalytic expression for the hydrogenic 1s radial wavefunction and its derivative in the format Z = tildeR + i tildeR^, where\n\n    tildeR_1s(ρ) = Z^32 2 e^-Zρ\n\nis the radial wavefunction and\n\n    tildeR^_1s(ρ) = -Z^52 2 e^-Zρ\n\nits derivative, with ρ the radial distance to the nucleus in a.u..\n\nExample:\n\natom = castAtom(Z=1, A=1, Q=0; msg=false);\norbit = castOrbit(n=1, ℓ=0; msg=false);\ngrid = autoGrid(atom, orbit, Float64; Nboost=1, msg=false);\ndef = castDef(grid, atom, orbit, codata);\n\nRH1s_example = [RH1s(atom.Z, grid.r[n]) for n=1:grid.N];\n\nplot_wavefunction(RH1s_example, 1:grid.N, grid, def; reduced=false)\n\nThe plot is made using CairomMakie. NB.: plot_function is not included in the CamiXon package. (Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#CamiXon.RH2s-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Hydrogen","title":"CamiXon.RH2s","text":"RH2s(Z::Int, r::T) where T <:Real\n\nAnalytic expression for the hydrogenic 1s reduced radial wavefunction and its derivative in the format Z = tildeR + i tildeR^, where\n\n    tildeR_2s(ρ)=left(Z2right)^32(1-Zρ2)2e^-Zρ2\n\nis the radial wavefunction and\n\n    tildeR_2s(ρ)=-left(Z2right)^52(2-Zρ2)2e^-Zρ2\n\nits derivative, with ρ the radial distance to the nucleus in a.u..\n\nExample:\n\natom = castAtom(Z=1, A=1, Q=0; msg=false);\norbit = castOrbit(n=2, ℓ=0; msg=false);\ngrid = autoGrid(atom, orbit, Float64; Nboost=1, msg=false);\ndef = castDef(grid, atom, orbit, codata; msg=false);\n\nRH2s_example = [RH2s(atom.Z, grid.r[n]) for n=1:grid.N];\n\nplot_wavefunction(RH2s_example, 1:grid.N, grid, def; reduced=false)\n\nThe plot is made using CairomMakie. NB.: plot_wavefunction is not included in the CamiXon package. (Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#CamiXon.RH2p-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Hydrogen","title":"CamiXon.RH2p","text":"RH2p(Z::Int, r::T) where T <:Real\n\nAnalytic expression for the hydrogenic 1s reduced radial wavefunction and its derivative in the format Z = tildeR + i tildeR^, where\n\n    tildeR_2p(ρ)=left(Z2right)^32sqrt13(Zρ2)2e^-Zρ2\n\nis the radial wavefunction and\n\n    tildeR_2p(ρ)=left(Z2right)^32sqrt13(1-Zρ2)2e^-Zρ2\n\nits derivative, with ρ the radial distance to the nucleus in a.u..\n\nExample:\n\natom = castAtom(Z=1, A=1, Q=0; msg=false);\norbit = castOrbit(n=2, ℓ=1; msg=false);\ngrid = autoGrid(atom, orbit, Float64; Nboost=1, msg=false);\ndef = castDef(grid, atom, orbit, codata);\n\nRH2p_example = [RH2p(atom.Z, grid.r[n]) for n=1:grid.N];\n\nplot_wavefunction(RH2p_example, 1:grid.N, grid, def; reduced=false)\n\nThe plot is made using CairomMakie. NB.: plot_wavefunction is not included in the CamiXon package. (Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#Molecular-properties","page":"Hydrogen","title":"Molecular properties","text":"","category":"section"},{"location":"man/properties/hydrogen/","page":"Hydrogen","title":"Hydrogen","text":"silvera_goldman_triplet(r::T) where T<:Real\nsilvera_goldman_singlet(r::T) where T<:Real\nsilvera_goldman_exchange(r::T) where T<:Real\nsilvera_goldman_potential(grid::CamiDiff.Grid{T}; S=0) where T<:Real\nrotbarrier(grid::CamiDiff.Grid{T}; ℓ=0) where T<:Real","category":"page"},{"location":"man/properties/hydrogen/#CamiXon.silvera_goldman_triplet-Tuple{T} where T<:Real","page":"Hydrogen","title":"CamiXon.silvera_goldman_triplet","text":"silvera_goldman_triplet(r::T) where T<:Real\n\nParametrization in Hartree a.u. of the triplet (^3Sigma_u^+) potential of the electronic  ground state of mathrmH_2 (Eh = 219474.6 cm-1), \n\n   V_t(r)=mathrmexpleft(009678-110173thinspace r-00394thinspace r^2right)+F(r)left(-65thinspace r^-6-124thinspace r^-8-3285r^-10thinspace right)\n\n   mathrmwhere         F(r) = begincases\nmathrmexpleft-left(frac1004r-1right)^2right  mathrmforr1004mathrmau\n1  mathrmforr1004mathrmau\nendcases\n\nsee I.F. Silvera, - Rev. Mod. Phys., 52, 393 (1980).\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#CamiXon.silvera_goldman_singlet-Tuple{T} where T<:Real","page":"Hydrogen","title":"CamiXon.silvera_goldman_singlet","text":"silvera_goldman_singlet(r::T) where T<:Real\n\nParametrization in Hartree a.u. of the singlet (^1Sigma_g^+) potential of mathrmH_2 (Eh = 219474.6 cm-1), \n\n   V_s(r)=V_t(r)-J(r)\n\nwhere V_t is the triplet potential (silvera_goldman_triplet) and J(r) is the exchange contribution (silvera_goldman_triplet).\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#CamiXon.silvera_goldman_exchange-Tuple{T} where T<:Real","page":"Hydrogen","title":"CamiXon.silvera_goldman_exchange","text":"silvera_goldman_exchange(r::T) where T<:Real\n\nParametrization in Hartree a.u. of the exchange energy difference between singlet (^3Sigma_u^+)  and triplet (^1Sigma_g^+) potentials  of mathrmH_2 (Eh = 219474.6 cm-1), \n\n    J(r)=mathrmexpleft(-0288-0275thinspace r-0176thinspace r^2+00068thinspace r^3right)\n\nsee I.F. Silvera, - Rev. Mod. Phys., 52, 393 (1980).\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#CamiXon.silvera_goldman_potential-Union{Tuple{Grid{T}}, Tuple{T}} where T<:Real","page":"Hydrogen","title":"CamiXon.silvera_goldman_potential","text":"silvera_goldman_potential(grid::CamiDiff.Grid{T}; S=0) where T<:Real\n\nCamiDiff.Grid representation in Hartree a.u. of the singlet (S=0) and triplet (S=1) potentials of mathrmH_2,\n\n    mathcalV(r)=V_D(r)+J(r)mathbfs_1cdotmathbfs_2\n\nwhere mathbfS = mathbfs_1+mathbfs_2 and \n\n    V_D(r)=frac14V_s(r)+3V_t(r)  mathrmand J(r)=V_t(r)-V_s(r)\n\nare known as the direct and exchange contribution, respectively; V_s see silvera_goldman_singlet,  V_t see silvera_goldman_triplet, J(r) see silvera_goldman_exchange.\n\nsee I.F. Silvera, - Rev. Mod. Phys., 52, 393 (1980).\n\n\n\n\n\n","category":"method"},{"location":"man/properties/hydrogen/#CamiXon.rotbarrier-Union{Tuple{Grid{T}}, Tuple{T}} where T<:Real","page":"Hydrogen","title":"CamiXon.rotbarrier","text":"rotbarrier(grid::CamiDiff.Grid{T}; ℓ=0) where T<:Real\n\nCamiDiff.Grid representation of rotational barrier potential in wavenumber notation,\n\nV_rot(r) = fracell(ell+1)r^2\n\nwhere ℓ is the rotational quantum number.\n\n\n\n\n\n","category":"method"},{"location":"man/coulomb/#Coulomb-integrals","page":"Coulomb integrals","title":"Coulomb integrals","text":"","category":"section"},{"location":"man/coulomb/#Angular-integrals","page":"Coulomb integrals","title":"Angular integrals","text":"","category":"section"},{"location":"man/coulomb/","page":"Coulomb integrals","title":"Coulomb integrals","text":"a_direct(k::Int, l::Int, ml::Int, l′::Int, ml′::Int)\nb_exchange(k::Int, l::Int, ml::Int, l′::Int, ml′::Int)","category":"page"},{"location":"man/coulomb/#CamiXon.a_direct-NTuple{5, Int64}","page":"Coulomb integrals","title":"CamiXon.a_direct","text":"a_direct(k::Int, l::Int, ml::Int, l′::Int, ml′::Int)\n\nCoulomb angular integral - direct part:\n\na^k(lm_ll^primem_l^prime)=(-)^m_l+m_l^prime\n(2l+1)(2l^prime+1)left(beginarrayccc\nl  k  l\n0  0  0\nendarrayright)left(beginarrayccc\nl  k  l\n-m_l  0  m_l\nendarrayright)left(beginarrayccc\nl^prime  k  l^prime\n0  0  0\nendarrayright)left(beginarrayccc\nl^prime  k  l^prime\n-m_l^prime  0  m_l^prime\nendarrayright)\n\nExample:\n\na_direct(2,1,1,2,2)\n    2//35\n\na_direct(6,3,2,3,-1)\n    -250//20449\n\n\n\n\n\n","category":"method"},{"location":"man/coulomb/#CamiXon.b_exchange-NTuple{5, Int64}","page":"Coulomb integrals","title":"CamiXon.b_exchange","text":"b_exchange(k::Int, l::Int, ml::Int, l′::Int, ml′::Int)\n\nCoulomb angular integral - exchange part:\n\nb^k(lm_ll^primem_l^prime)=(2l+1)(2l^prime+1)\nleft(beginarrayccc\nl  k  l^prime\n0  0  0\nendarrayright)^2left(beginarrayccc\nl  k  l^prime\n-m_l  (m_l-m_l^prime)  m_l^prime\nendarrayright)^2\n\nExample:\n\nb_exchange(1,1,1,2,2)\n    2//5\n\nb_exchange(6,3,2,3,-1)\n    1050//20449\n\n\n\n\n\n","category":"method"},{"location":"man/coulomb/#Radial-integrals","page":"Coulomb integrals","title":"Radial integrals","text":"","category":"section"},{"location":"man/coulomb/#Coulomb-repulsion-direct-integral","page":"Coulomb integrals","title":"Coulomb repulsion - direct integral","text":"","category":"section"},{"location":"man/coulomb/","page":"Coulomb integrals","title":"Coulomb integrals","text":"Fk(k::Int, P::Vector{T}, grid::CamiDiff.Grid) where T<:Real","category":"page"},{"location":"man/coulomb/#CamiXon.Fk-Union{Tuple{T}, Tuple{Int64, Vector{T}, Grid}} where T<:Real","page":"Coulomb integrals","title":"CamiXon.Fk","text":"Fk(k::Int, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid) where T<:Real\n\nk^th-order-multipole contribution to the direct radial integral over  the (reduced) radial wavefunctions P1 and P2 of two electrons (in the orbitals  nl and n^primel^prime) in a central potential field.\n\nF^k(nln^primel^prime)\n=int_0^inftyU_F^k(nlrho)lefttildeR_n^primel^prime(rho)right^2rho^2drho\n=int_0^inftyU_F^k(n^primel^primerho)lefttildeR_nl(rho)right^2rho^2drho\n\nFk(k::Int, P::Vector{T}, grid::CamiDiff.Grid) where T<:Real\n\nk^th-order contribution to the direct radial integral over the (reduced)  radial wavefunction P of two equivalent nl electrons in a central potential.\n\nF^k(nl)\n=int_0^inftyU_F^k(nlrho)lefttildeR_nl(rho)right^2rho^2drho\n\n\n\n\n\n","category":"method"},{"location":"man/coulomb/#Coulomb-repulsion-exchange-integral","page":"Coulomb integrals","title":"Coulomb repulsion - exchange integral","text":"","category":"section"},{"location":"man/coulomb/","page":"Coulomb integrals","title":"Coulomb integrals","text":"Gk(k::Int, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid) where T<:Real","category":"page"},{"location":"man/coulomb/#CamiXon.Gk-Union{Tuple{T}, Tuple{Int64, Vector{T}, Vector{T}, Grid}} where T<:Real","page":"Coulomb integrals","title":"CamiXon.Gk","text":"Gk(k::Int, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid) where T<:Real\n\nk^th-order-multipole contribution to the exchange radial integral over  the (reduced) radial wavefunctions P1 and 'P2' of two electrons in a central potential.\n\nF^k(nln^primel^prime)\n=int_0^inftyU_F^k(nlrho)lefttildeR_n^primel^prime(rho)right^2rho^2drho\n\n\n\n\n\n","category":"method"},{"location":"man/coulomb/#Direct-screening-potentials","page":"Coulomb integrals","title":"Direct screening potentials","text":"","category":"section"},{"location":"man/coulomb/","page":"Coulomb integrals","title":"Coulomb integrals","text":"UFk(k::Int, P::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\nUF(orbit1::Orbit, orbit2::Orbit, P2::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real","category":"page"},{"location":"man/coulomb/#CamiXon.UFk-Union{Tuple{T}, Tuple{Int64, Vector{T}, Grid{T}}} where T<:Real","page":"Coulomb integrals","title":"CamiXon.UFk","text":"UFk(k::Int, P::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\n\nk^th-order-multipole contribution to the direct screening potential  by an electron in the (reduced) radial wavefunction P of an atom.\n\nU_F^k(rho)\n=frac1rho^k+1int_0^rhovarrho^k\nlefttildeR_nl(varrho)right^2\nvarrho^2dvarrho+rho^kint_rho^infty\nfrac1varrho^k+1\nlefttildeR_nl(varrho)right^2varrho^2dvarrho\n\nExample:\n\ncodata = castCodata(2022)\natom = castAtom(Z=2, A=4, Q=0; msg=false);\norbit = castOrbit(n=1, ℓ=0; msg=false);\ngrid = autoGrid(atom, orbit, Float64; msg=true);\ndef = castDef(grid, atom, orbit, codata);\nE = 0;\nscr = zeros(grid.T,grid.N);       \ndef, adams, init, Z = adams_moulton_nodes(E, scr, grid, def; imax=100, msg=false);\ndef, adams, init, Z = adams_moulton_iterate!(Z, init, grid, def, adams; imax=25, ϵ=1e-10, msg=false);\nP1 = real(Z);\nUF0P1 = UF(0, P1, grid);\nplot_function(scrUF0P1, 1:grid.N, grid; title=\"He4(1s,1s):  direct screening potential\")\n\nThe plot is made using CairomMakie. NB.: plot_function is not included in the CamiXon package. (Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"man/coulomb/#CamiXon.UF-Union{Tuple{T}, Tuple{Orbit, Orbit, Vector{T}, Grid{T}}} where T<:Real","page":"Coulomb integrals","title":"CamiXon.UF","text":"UF(orbit1::Orbit, orbit2::Orbit, P2::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\n\nPotential of direct screening for the spectator electron in orbit 1 by the screening  electron in orbit2 with (reduced) radial wavefunction P2.\n\nU_F(u_kappau_kappa^primerho)\n=textstyle sumlimits_k=0^inftya^k(lm_ll^primem_l^prime)U_F^k(nlrho)\n\nExample:\n\n\n\n\n\n\n\n","category":"method"},{"location":"man/coulomb/#Exchange-screening-potentials","page":"Coulomb integrals","title":"Exchange screening potentials","text":"","category":"section"},{"location":"man/coulomb/","page":"Coulomb integrals","title":"Coulomb integrals","text":"UGk(k::Int, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\nUG(orbit1::Orbit, orbit2::Orbit, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real","category":"page"},{"location":"man/coulomb/#CamiXon.UGk-Union{Tuple{T}, Tuple{Int64, Vector{T}, Vector{T}, Grid{T}}} where T<:Real","page":"Coulomb integrals","title":"CamiXon.UGk","text":"UGk(k::Int, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\n\nk^th-order-multipole contribution to the exchange screening potential  of the (reduced) electronic wavefunctions P1 and P2 of the same atom.\n\nU_G^k(rho)\n=frac1rho^k+1int_0^rhovarrho^ktildeR_nl(varrho)\ntildeR_n^primel^prime(varrho)\nvarrho^2dvarrho+rho^kint_rho^infty\nfrac1varrho^k+1tildeR_nl(varrho)\ntildeR_n^primel^prime(varrho)varrho^2dvarrho\n\nExample:\n\natom = castAtom(Z=2, A=4, Q=0; msg=true)\norbit1 = castOrbit(n=1, ℓ=0; msg=true)\norbit2 = castOrbit(n=2, ℓ=0; msg=true)\nscr = nothing\ngrid = autoGrid(atom, [orbit1,orbit2], Float64; Nboost=1, msg=true)\ndef1 = castDef(grid, atom, orbit1, codata; scr)\nE = initE(def1)\nadams = castAdams(E, grid, def1)\nE, def, adams, Z1 = adams_moulton_master(E, grid, def1, adams; Δν=Value(1,\"kHz\"), imax=50, msg=false);\n\ndef2 = castDef(grid, atom, orbit2, codata; scr)\nE = initE(def2)\nadams = castAdams(E, grid, def2)\nE, def, adams, Z2 = adams_moulton_master(E, grid, def2, adams; Δν=Value(1,\"kHz\"), imax=50, msg=false);\n\nP1 = real(Z1);\nP2 = real(Z2);\n\nUG0 = UG(0, P1, P2, grid);\nplot_function(UG0, 1:grid.N, grid; title=\"He4(1s,2s):  exchange screening potential\")\n\nThe plot is made using CairomMakie. NB.: plot_function is not included in the CamiXon package. (Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"man/coulomb/#CamiXon.UG-Union{Tuple{T}, Tuple{Orbit, Orbit, Vector{T}, Vector{T}, Grid{T}}} where T<:Real","page":"Coulomb integrals","title":"CamiXon.UG","text":"UG(orbit1::Orbit, orbit2::Orbit, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\n\nPotential of exchange screening of two electrons with (reduced) wavefunctions P1 and P2, corresponding to the electronic orbitals orbit1 and orbit2.\n\nNB.  UF(orbit1, orbit2, P1, P2, grid) = UF(orbit2, orbit1, P1, P2, grid)\n\nU_G(u_kappau_kappa^primerho)\n=textstyle sumlimits_k=0^inftyb^k(lm_ll^primem_l^prime)U_G^k(nln^primel^primerho)\n\nExample:\n\n\n\n\n\n\n\n","category":"method"},{"location":"man/coulomb/#Direct-and-exchange-energies","page":"Coulomb integrals","title":"Direct and exchange energies","text":"","category":"section"},{"location":"man/coulomb/","page":"Coulomb integrals","title":"Coulomb integrals","text":"𝒥(orbit1::Orbit, orbit2::Orbit, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\n𝒦(orbit1::Orbit, orbit2::Orbit, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real","category":"page"},{"location":"man/coulomb/#CamiXon.𝒥-Union{Tuple{T}, Tuple{Orbit, Orbit, Vector{T}, Vector{T}, Grid{T}}} where T<:Real","page":"Coulomb integrals","title":"CamiXon.𝒥","text":"𝒥(orbit1::Orbit, orbit2::Orbit, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\n\nThe direct integral of the electrostatic repulsion energy between two electrons in the (reduced) eigenstates P1 and P2 of an atom,  which correspond to the orbitals orbit1 and orbit2.\n\nmathcalJ(u_kappau_kappa^prime)=(u_kappau_kappa^primefrac1rho_12u_kappau_kappa^prime)\n=int_0^inftyU_F(u_kappau_kappa^primerho)lefttildeR_n^primel^prime(rho)right^2rho^2drho\n\n\n\n\n\n","category":"method"},{"location":"man/coulomb/#CamiXon.𝒦-Union{Tuple{T}, Tuple{Orbit, Orbit, Vector{T}, Vector{T}, Grid{T}}} where T<:Real","page":"Coulomb integrals","title":"CamiXon.𝒦","text":"𝒦(orbit1::Orbit, orbit2::Orbit, P1::Vector{T}, P2::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\n\nThe exchange integral\n\nmathcalK(u_kappau_kappa^prime)=(u_kappau_kappa^primefrac1rho_12u_kappa^primeu_kappa)\n=int_0^inftyU_G(u_kappau_kappa^primerho)tildeR_nl(rho)tildeR_n^primel^prime(rho)rho^2drho\n\n\n\n\n\n","category":"method"},{"location":"man/properties/thermal/#Thermodynamic-properties","page":"Thermodynamic properties","title":"Thermodynamic properties","text":"","category":"section"},{"location":"man/properties/thermal/#Melting-points","page":"Thermodynamic properties","title":"Melting points","text":"","category":"section"},{"location":"man/properties/thermal/","page":"Thermodynamic properties","title":"Thermodynamic properties","text":"melting_point(atomicnumber::Int)","category":"page"},{"location":"man/properties/thermal/#CamiXon.melting_point-Tuple{Int64}","page":"Thermodynamic properties","title":"CamiXon.melting_point","text":"melting_point(atomicnumber::Int)\nmelting_point(element::String)\n\nMelting point of a given element at standard pressure (1 atm).\n\nExample:\n\njulia> melting_point(\"Li\")\n453.65\n\n\n\n\n\n","category":"method"},{"location":"man/properties/thermal/#Saturated-vapor-pressure","page":"Thermodynamic properties","title":"Saturated vapor pressure","text":"","category":"section"},{"location":"man/properties/thermal/","page":"Thermodynamic properties","title":"Thermodynamic properties","text":"svp(atomicnumber::Int, temp::Real)","category":"page"},{"location":"man/properties/thermal/#CamiXon.svp-Tuple{Int64, Real}","page":"Thermodynamic properties","title":"CamiXon.svp","text":"svp(atomicnumber::Int, temp::Real)\nsvp(element::String, temp::Real)\n\nSaturated vapor pressure, p (in Pa), of a given element for a given  temperature T (in K),\n\nmathrmlog_ep=A+BT+Cmathrmlog_10T+Dcdot T1000\n\nwhere A,B,C,D, are the Antoine coefficients collected in  CamiXon.dictAntoineCoefficient.\n\nExamples:\n\njulia> svp(\"Li\", 623.0)\n0.0015230367024569058\n\n\n\n\n\n","category":"method"},{"location":"man/properties/thermal/#Latent-heat-of-vaporization","page":"Thermodynamic properties","title":"Latent heat of vaporization","text":"","category":"section"},{"location":"man/properties/thermal/","page":"Thermodynamic properties","title":"Thermodynamic properties","text":"latent_heat_vaporization(atomicnumber::Int, temp::Real)","category":"page"},{"location":"man/properties/thermal/#CamiXon.latent_heat_vaporization-Tuple{Int64, Real}","page":"Thermodynamic properties","title":"CamiXon.latent_heat_vaporization","text":"latent_heat_vaporization(atomicnumber::Int, temp::Real)\nlatent_heat_vaporization(element::String, temp:Real)\n\nLatent heat of vaporization, L(T) (in Joule/K), of a given element  for temperature T (in K), \n\nL(T) = -(B +Ccdot T mathrmlog_10T+Dcdot T^21000)\n\nwhere A,B,C,D, are the Antoine coefficients collected in  CamiXon.dictAntoineCoefficient.\n\nExample:\n\njulia> latent_heat_vaporization(\"Li\", 623.0)\n-18473.64020109123\n\n\n\n\n\n","category":"method"},{"location":"man/properties/thermal/#Dictionaries","page":"Thermodynamic properties","title":"Dictionaries","text":"","category":"section"},{"location":"man/properties/thermal/#Antoine-coefficients","page":"Thermodynamic properties","title":"Antoine coefficients","text":"","category":"section"},{"location":"man/properties/thermal/","page":"Thermodynamic properties","title":"Thermodynamic properties","text":"dictAntoineCoefficient","category":"page"},{"location":"man/properties/thermal/#CamiXon.dictAntoineCoefficient","page":"Thermodynamic properties","title":"CamiXon.dictAntoineCoefficient","text":"dictAntoineCoefficient\n\nAntoine coefficients [A,B,C,D] for temperature ranges below and above the melting points from dictMeltingPoint. These coefficients are used  in the Antoine equation to calculate the saturated vapor pressure p (in Pa)  at temperature `T (in K),\n\nmathrmlog_ep=A+BT+Cmathrmlog_10T+Dcdot T1000\n\nCurrently, only the coefficients for the metalic elements are implemented - see C. B. Alcock, V. P. Itkin and M. K. Horrigan, Canadian Metallurgical Quarterly, 23, 309 (1984).\n\nNote that the melting point is taken to be pressure independent.\n\njulia> dictAntoineCoefficient\nDict{Int64, Tuple{Any, Any, Tuple{Any, Any, Any}}} with 102 entries:\n  5  => (nothing, nothing, (empty, 2349.0, empty))\n  56 => ([40.0897, -22312.0, -5.27062, 0.0], [20.7526, -18796.0, 0.0, 0.0], (298.0, 1000.0, 1200.0))\n  35 => (nothing, nothing, (empty, 265.8, empty))\n  55 => ([22.3736, -9208.04, 0.0, 0.0], [21.1164, -8818.9, 0.0, 0.0], (298.0, 301.7, 550.0))\n  60 => ([32.2402, -39751.8, -2.19183, 0.0], [22.8364, -36436.1, 0.0, 0.0], (298.0, 1297.0, 2000.0))\n  30 => ([25.5765, -15602.3, 0.0, 0.0], [23.9094, -14474.0, 0.0, 0.0], (298.0, 692.68, 750.0))\n  32 => (nothing, nothing, (empty, 1211.4, empty))\n  ⋮  => ⋮\n\nExamples:\n\nTo calculate the saturated vapor pressure of Li (in Pa) at T=623 K we use the Antoine equation implemented in thefunction svp.\n\njulia> svp(55, 400)\n0.39420306801845933\n\njulia> svp(\"Cs\", 400)\n0.39420306801845933\n\n\n\n\n\n","category":"constant"},{"location":"man/properties/thermal/#Melting-points-2","page":"Thermodynamic properties","title":"Melting points","text":"","category":"section"},{"location":"man/properties/thermal/","page":"Thermodynamic properties","title":"Thermodynamic properties","text":"dictMeltingPoint","category":"page"},{"location":"man/properties/thermal/#CamiXon.dictMeltingPoint","page":"Thermodynamic properties","title":"CamiXon.dictMeltingPoint","text":"dictMeltingPoint\n\nMelting points of the elements at standard pressure (1atm) - see Wikipedia\n\njulia> dictMeltingPoint\nDict{Int64, Union{Nothing, Real}} with 102 entries:\n  5  => 2349   \n  56 => 1000   \n  35 => 265.8  \n  55 => 301.7  \n  60 => 1297   \n  30 => 692.68 \n  32 => 1211.4 \n  6  => nothing\n  67 => 1734   \n  ⋮  => ⋮\n\nExamples:\n\njulia> get(dictMeltingPoint, 3, nothing)\n453.65\n\njulia> melting_point(\"Li\")\n453.65\n\n\n\n\n\n","category":"constant"},{"location":"man/adams-moulton/grid/#Grid","page":"Grid","title":"Grid","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"The CamiDiff.Grid object is the backbone for the numerical procedure on a non-uniform grid. Its principal fields are grid.r and grid.r′, which are discrete functions of N elements representing the grid function and its derivative.","category":"page"},{"location":"man/adams-moulton/grid/#autoGrid","page":"Grid","title":"autoGrid","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"autoGrid(atom::Atom, orbit::Orbit, T::Type; p=0, rmax=0, N=0, polynom=[], epn=5, k=5, msg=false)","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.autoGrid-Tuple{Atom, Orbit, Type}","page":"Grid","title":"CamiXon.autoGrid","text":"autoGrid(atom, orbit, T[; p=0[, rmax=0[, N=0[, h=0[, polynom=[][, epn=5[, k=5 [, msg=false]]]]]]])\n\nAutomatic setting of grid parameters for a given orbit Orbit or an array of orbits - orbits = [orbit1, orbit2, ⋯]. Important cases:\n\np == 0 (exponential radial grid)\np == 1 (linear radial grid)\np > 1 (quasi-exponential radial grid)\npolynom=[] (free polynomial grid based on the polynom)\nNboost (multiplier to boost numerical precision)\nepn (endpoint number: odd number to be used for trapezoidal integration with endpoint correction)\nk (Adams-Moulton order to be used for k+1-point Adams-Moulton integration)\n\nExample:\n\njulia> atom = castAtom(;Z=1, A=1, Q=0, msg=false);\n\njulia> orbit = castOrbit(n=75, ℓ=0, msg=false);\n\njulia> grid = autoGrid(atom, orbit, Float64; msg=true);\nGrid: exponential, Float64, rmax = 14137.5, N = 7900, h = 0.00126582, r0 = 0.642684\n\nplot_gridfunction(grid, 1:grid.N; title=\"\")\n\nThe plot is made using CairomMakie. NB.: plot_gridfunction is not part of the CamiXon package. (Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#autoNtot","page":"Grid","title":"autoNtot","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"autoNtot(orbit::Orbit)","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.autoNtot-Tuple{Orbit}","page":"Grid","title":"CamiXon.autoNtot","text":"autoNtot(orbit::Orbit)\n\nTotal number of gridpoints (rule of thumb value)\n\n    N_tot = 400 + 100 n\n\nwhere n is the principal quantum number\n\nExample:\n\njulia> orbit = castOrbit(n=1, ℓ=0);\n\njulia> autoNtot(orbit)\n500\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#autoRmax","page":"Grid","title":"autoRmax","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"autoRmax(atom::Atom, orbit::Orbit; rmax=0.0)","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.autoRmax-Tuple{Atom, Orbit}","page":"Grid","title":"CamiXon.autoRmax","text":"autoRmax(rmax::T, atom::Atom, orbit::Orbit) where T<:Real\n\nLargest relevant radial distance in a.u. (rule of thumb value)\n\n    R_max = (25n^2 + 750)Zc\n\nwhere n is the principal quantum number and Z_c the Rydberg charge\n\nExample:\n\njulia> atom = castAtom(Z=1, A=1, Q=0);\n\njulia> orbit = castOrbit(n=1, ℓ=0);\n\njulia> rmax = autoRmax(atom, orbit; rmax=0.0); println(\"rmax = $(rmax) a.u.\")\nrmax = 77.5 a.u.\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#autoPrecision","page":"Grid","title":"autoPrecision","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"autoPrecision(rmax::T, orbit::Orbit) where T<:Real","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.autoPrecision-Union{Tuple{T}, Tuple{T, Orbit}} where T<:Real","page":"Grid","title":"CamiXon.autoPrecision","text":"autoPrecision(rmax::T, orbit::Orbit) where T<:Real\n\nFloating point precision (rule of thumb value)\n\nExample:\n\njulia> atom = castAtom(Z=1);\n\njulia> orbit = castOrbit(n=1,ℓ=0);\n\njulia> rmax = autoRmax(atom, orbit; rmax=0.0); println(\"rmax = $(rmax) a.u.\")\nrmax = 77.5 a.u.\n\njulia> o = autoPrecision(rmax, orbit); println(\"precision = $o\")\nprecision = Float64\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#Def","page":"Grid","title":"Def","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"The Def object serves to define the problem to be solved and to contain in the field def.Z the solution as a discrete function of N elements.","category":"page"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"Def{T}","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.Def","page":"Grid","title":"CamiXon.Def","text":"Def(T, atom, spinorbit, pot, scr, o1, o2, o3, pos, epn, k, am, matLD)\n\nType with fields:\n\n.atom::Atom             : atom object\n.spinorbit::Spinorbit    : spinorbit object\n.codata::Codata           : codata object\n.pot::Vector{T}        : tabulated potential function\n.scr::Vector{T}        : tabulated screening function\n.potscr::Vector{T}        : tabulated screened potential function\n.G::Vector{Matrix{T}}: vector of zero-filled matrices\n.σ::Vector{Matrix{T}}: vector of zero-filled matrices\n.Minv::Vector{Matrix{T}}: vector of zero-filled matrices\n.pos::Pos              : object with fields Na, Nlctp, Nmin, Nuctp, Nb, N and nodes\n.epn::Int              : number of endpoints trapezoidal correction - must be odd\n.k::Int              : Adams-Moulton order \n.am::Vector{T}        : Adams-Moulton weight coefficients\n.matLD::Matrix{T}        : Lagrangian differentiation matrix\n\nThe object Def is best created with the function castDef.\n\n\n\n\n\n","category":"type"},{"location":"man/adams-moulton/grid/#castDef","page":"Grid","title":"castDef","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"castDef(grid::CamiDiff.Grid{T}, atom::Atom, spinorbit::Spinorbit, codata::Codata; pos=nothing, scr=nothing, msg=false) where T <: Real","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.castDef-Union{Tuple{T}, Tuple{Grid{T}, Atom, Spinorbit, Codata}} where T<:Real","page":"Grid","title":"CamiXon.castDef","text":"castDef(grid::CamiDiff.Grid{T}, atom::Atom, spinorbit::Spinorbit, codata::Codata [; pos=nothing, [scr=nothing[, msg=false]]) where T <: Real\n\nCreate the Def object starting from the CamiDiff.Grid object and the atomic properties of the objects Atom and Orbit. Optional: scr (supply screening array)\n\nExample:\n\njulia> codata = castCodata(2018)\njulia> atom = castAtom(Z=1, A=1, Q=0);\njulia> orbit = castOrbit(n=7, ℓ=2);\njulia> grid = autoGrid(atom, orbit, Float64);\n\njulia> castDef(grid, atom, orbit, codata, msg=true);\nDef created for hydrogen 7d on exponential grid of 400 points\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#Pos","page":"Grid","title":"Pos","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"The Pos object serves within Def object to contain the position indices def.Na, def.Nb, def.Nlctp, def.Nmin, def.Nuctp used in Adams-Moulton integration. These positions are contained in the fields def.pos.Na, def.pos.Nb, def.pos.Nlctp, def.pos.Nmin, def.pos.Nuctp.","category":"page"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"Pos","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.Pos","page":"Grid","title":"CamiXon.Pos","text":"mutable struct Pos{T} where T<:Real\n\nType with fields:\n\n.Na::Int: grid index of last leading point\n.Nlctp::Int: grid index of lower classical turning point\n.Nmin::Int: grid index of (screened) potential minimum\n.Nuctp::Int: grid index of upper classical turning point\n.Nb::Int: grid index first trailing point\n.N::Int: grid index last point\n.nodes::Int: number of nodes in reduced wavefunction (r ≠ 0)\n.ΔNlctp::Float64: lctp offset with respect to Nlctp (1.0 ≤ ΔN ≤ 1.0)\n.ΔNuctp::Float64: uctp offset with respect to Nuctp (-1.0 ≤ ΔN ≤ 0.0)\n\nMutable struct to hold special grid indices as well as the number of nodes and the (negative) offset of the exact uctp with respect to Nuctp. Pos is one of the fields of the Def object\n\nExamples:\n\njulia> pos = Pos(1, 2, 3, 4, 5, 6, 7, 8.0, 9.0, 10.0);\njulia> pos.Nuctp\n4\n\njulia> pos.Nuctp = 8;\njulia> pos\nPos(1, 2, 3, 8, 5, 6, 7, 8.0, 9.0, 10.0)\n\n\n\n\n\n","category":"type"},{"location":"man/adams-moulton/grid/#castPos","page":"Grid","title":"castPos","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"castPos(E::T, Veff::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.castPos-Union{Tuple{T}, Tuple{T, Vector{T}, Grid{T}}} where T<:Real","page":"Grid","title":"CamiXon.castPos","text":"castPos(E::T, Veff::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\n\nCreate the Pos object starting from the energy E, and the effective  potential energy (screened Coulomb potential) Veff[n] tabulated on the CamiDiff.Grid. \n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#updatePos!","page":"Grid","title":"updatePos!","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"updatePos!(pos::Pos, E::T, Veff::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.updatePos!-Union{Tuple{T}, Tuple{Pos, T, Vector{T}, Grid{T}}} where T<:Real","page":"Grid","title":"CamiXon.updatePos!","text":"updatePos!(pos::Pos, E::T, Veff::Vector{T}, grid::CamiDiff.Grid{T}) where T<:Real\n\nUpdate the Pos object starting from the energy E, and the effective  potential energy (screened Coulomb potential) Veff[n] tabulated on the CamiDiff.Grid. \n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#listPos","page":"Grid","title":"listPos","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"listPos(pos::Pos; msg=true)","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.listPos-Tuple{Pos}","page":"Grid","title":"CamiXon.listPos","text":"listPos(pos::Pos [; msg=true])\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#Pos-related-functions","page":"Grid","title":"Pos-related functions","text":"","category":"section"},{"location":"man/adams-moulton/grid/","page":"Grid","title":"Grid","text":"getNmin(f::Vector{T}, start::Int, stop::Int) where T<:Real\ngetNmax(f::Vector{T}, start::Int, stop::Int) where T<:Real\ngetNcut(f0::T, f::Vector{T}, start::Int, stop::Int) where T<:Real\ngetΔNcut(f0::T, f::Vector{T}, Ncut::Int, sense=fwd; ϵ = 1e-8, k = 7) where T<:Real","category":"page"},{"location":"man/adams-moulton/grid/#CamiXon.getNmin-Union{Tuple{T}, Tuple{Vector{T}, Int64, Int64}} where T<:Real","page":"Grid","title":"CamiXon.getNmin","text":"getNmin(f::Vector{T}, start::Int, stop:Int) where T<:Real\ngetNmin(f::Vector{T}, itr::UnitRange) where T<:Real\n\nIndex corresponding to the absolute minimum of the discrete function fn truncated  at the boundary of the interval start  n  stop.  Condition: fn must be monotonically increasing or decreasing on the interval startstop.\n\nNB. For a regular parabola the algorithm finds the index of the minimum. A truncated inverted parabola has  two minima (at the boundaries of the interval). In this case the algorithm finds the index  of the lowest of the two. If undecided the result is start.\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#CamiXon.getNmax-Union{Tuple{T}, Tuple{Vector{T}, Int64, Int64}} where T<:Real","page":"Grid","title":"CamiXon.getNmax","text":"getNmax(f::Vector{T}, start::Int, stop:Int) where T<:Real\ngetNmax(f::Vector{T}, itr::UnitRange) where T<:Real\n\nIndex corresponding to the absolute maximum of the discrete function fn truncated  at the boundaries of the interval start  n  stop.  Condition: fn must be monotonically increasing or decreasing on the interval startstop.\n\nNB. For an inverted parabola the algorithm finds the index of the extremum. A regular parabola  has two maxima (at the boundaries of the search interval). In this case the algorithm finds the  index of the highest of the two. If undecided the result is start.\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#CamiXon.getNcut-Union{Tuple{T}, Tuple{T, Vector{T}, Int64, Int64}} where T<:Real","page":"Grid","title":"CamiXon.getNcut","text":"getNcut(f0::T, f::Vector{T}, start::Int, stop::Int) where T<:Real\ngetNcut(f0::T, f::Vector{T}, itr::UnitRange) where T<:Real\n\nIndex corresponding to the intersection point of the discrete function fn with the value f_0  in the interval start ≤ n ≤ stop, \n\n    fn_cut = f_0\n\nCondition: fn must be monotonically increasing or decreasing on the interval start ≤ n ≤ stop.\n\nNB. For a monotonically decreasing function n_cut is approximated by the largest n for which fn  f_0. For a monotonically increasing function  n_cut is approximated by the smallest n for which fn  f_0.\n\n\n\n\n\n","category":"method"},{"location":"man/adams-moulton/grid/#CamiXon.getΔNcut-Union{Tuple{T}, Tuple{T, Vector{T}, Int64}, Tuple{T, Vector{T}, Int64, Any}} where T<:Real","page":"Grid","title":"CamiXon.getΔNcut","text":"getΔNcut(f0::T, f::Vector{T}, Ncut::Int, sense=fwd; ϵ = 1e-8, k = 7)\n\nOffset of the exact intersection with respect to the index Ncut given as a Real number. ϵ - convergence goal k - order of a k+1 point Lagrange interpolation procedure based on a linear grid.  Forward sense (fwd): value in the interval {0.0, 1.0} Backward sense (bwd): value in the interval {-1.0, 0.0}\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CamiXon","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CamiXon.jl is a Julia package for the numerical  solution of the radial Schrödinger equation allowing for screening.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is installed using the Julia package manager","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"CamiDiff\")\n\njulia> using CamiDiff","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In CamiXon the solution of the radial Schrödinger equation is obtained  for a single electron, acting as a spectator in the central field of  the atomic nucleus screened by 'the other' electrons (the screening electrons).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The starting point is the 1D Schrödinger equation,","category":"page"},{"location":"","page":"Home","title":"Home","text":"tildeχ_l^+2Z_mathrmeff(ρ)ρ-l(l+1)2ρ^2+ε_ltildeχ_l=0","category":"page"},{"location":"","page":"Home","title":"Home","text":"where tildechi_l(rho)=rhotildeR_l(rho) is the reduced radial wavefunction and ε_l=-κ _l^2 is the corresponding binding energy in Hartree atomic units (a.u.). As compared to the hydrogenic case, the atomic number Z has been replaced by Z_mathrmeff(ρ), the effective nuclear charge at radial distance ρ from the atomic center (in a.u.). In other words, the energy of the electron in the Coulomb field of the nucleus is replaced by an effective, central field potential of the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"U_mathrmCF(ρ)=-Z_mathrmeff(ρ)ρ=-Zρ+U_mathrmscr(ρ)","category":"page"},{"location":"","page":"Home","title":"Home","text":"consisting of the bare Coulomb contribution, -Zρ, and the screening field U_mathrmscr(ρ), subject to the boundary conditions U_mathrmscr(0)=Z and mathrmlim_ρinftyU_mathrmscr(ρ)=Z_cρ. Here Z_c is the Rydberg charge; i.e. the effective nuclear charge for a spectator electron in the far field (ρinfty). Within these assumptions we can optimize U_mathrmscr(ρ), while preserving the bare Coulomb field close to the nucleus as well as the Rydberg potential in the far field. The price we pay is that the radial Schrödinger equation has to be solved numerically by radial integration. Our strategy is to use both inward and outward integration and match the two branches by equating the two solutions for the wavefunction, χ(ρ), and its derivative, χ^(ρ), at a point near the classical turning point of the radial motion of the electron. The basics of the solution can be found in the book Atomic Structure Theory by Walter R. Johnson.","category":"page"},{"location":"#Illustration:-the-hydrogen-3d-orbital","page":"Home","title":"Illustration: the hydrogen 3d orbital","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Shown below are the reduced radial wavefunction (χ) and its derivative (χ^) in the near field (left), the far field (right), and in the region near the classical turning point (center). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Image)","category":"page"},{"location":"#Illustration:-central-field-potential-U_{\\mathrm{CF}}-versus-grid-index","page":"Home","title":"Illustration: central field potential U_mathrmCF versus grid index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"codata = castCodata(2018)\natom = castAtom(Z=1, A=1, Q=0)\norbit = castOrbit(n=7, ℓ=2)\ngrid = autoGrid(atom, orbit, Float64)\ndef = castDef(grid, atom, orbit, codata)\nE = convert(grid.T,bohrformula(atom.Z, orbit.n))\nadams = castAdams(E, grid, def)\n@printf \"E = %.15g %s \\n\" E \"Hartree\"\n    Element created: H, hydrogen, Z=1, weight=1.008\n    Isotope created: ¹H, hydrogen, Z=1, A=1, N=0, R=0.8783, M=1.007825032, I=1/2⁺, μI=2.792847351, Q=0.0, RA=99.9855%, (stable)\n    Atom created: hydrogen, neutral atom, ¹H, Z=1, A=1, Q=0, Zc=1\n    Orbital: 7d\n        principal quantum number: n = 7\n        radial quantum number: n′ = 4 (number of nodes in radial wavefunction)\n        orbital angular momentum of valence electron: ℓ = 2\n    CamiDiff.Grid created: exponential, Float64, rmax = 207.0 a.u., N = 400, h = 0.025, r0 = 0.00939821\n    Def created for hydrogen 7d on exponential grid of 400 points\n    E = -0.0102040816326531 Hartree\n\nplot_potentials(E, grid, def)\n    Nlctp = 234, Nmin = 259, Nuctp = 369 (Ructp = 93.0059202490 a.u.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The plot is made using CairomMakie. NB.: plot_potentials is not included in the CamiXon package. (Image: Image)","category":"page"}]
}
